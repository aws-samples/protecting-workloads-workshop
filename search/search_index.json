{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Protecting Workloads on AWS Abstract Your mission in this session is to use AWS WAF, Amazon Inspector, and Systems Manager to build an effective set of controls around your AWS workloads. Learn to use AWS WAF to mitigate common attack vectors against web applications such as SQL injection and cross-site scripting. Additionally, learn how to use Amazon Inspector and Systems Manager to automate security assessments and operational tasks such as patching and configuration management across your Amazon EC2 fleet. Workshop - Protecting workloads with AWS WAF, Amazon Inspector and AWS Systems Manager Builder Session - Supercharging your workload defenses with AWS WAF, Amazon Inspector, and AWS Systems Manager","title":"Home"},{"location":"#protecting-workloads-on-aws","text":"","title":"Protecting Workloads on AWS"},{"location":"#abstract","text":"Your mission in this session is to use AWS WAF, Amazon Inspector, and Systems Manager to build an effective set of controls around your AWS workloads. Learn to use AWS WAF to mitigate common attack vectors against web applications such as SQL injection and cross-site scripting. Additionally, learn how to use Amazon Inspector and Systems Manager to automate security assessments and operational tasks such as patching and configuration management across your Amazon EC2 fleet.","title":"Abstract"},{"location":"#workshop-protecting-workloads-with-aws-waf-amazon-inspector-and-aws-systems-manager","text":"","title":"Workshop - Protecting workloads with AWS WAF, Amazon Inspector and AWS Systems Manager"},{"location":"#builder-session-supercharging-your-workload-defenses-with-aws-waf-amazon-inspector-and-aws-systems-manager","text":"","title":"Builder Session - Supercharging your workload defenses with AWS WAF, Amazon Inspector, and AWS Systems Manager"},{"location":"cleanup/","text":"AWS Protecting Workloads Workshop - Cleanup Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"AWS Protecting Workloads Workshop - Cleanup"},{"location":"cleanup/#aws-protecting-workloads-workshop-cleanup","text":"Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"AWS Protecting Workloads Workshop - Cleanup"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"builder-session/","text":"Supercharging your workload defenses with AWS WAF, Amazon Inspector and AWS Systems Manager Welcome to the AWS Supercharging your Workload Defenses Builder Session! In this builder session, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use AWS Web Application Firewall (WAF), Amazon Inspector and AWS Systems Manager to identify the vulnerabilities and remediate them. Scenario Welcome to Widgets LLC! You have just joined the team and your first task is to enhance security for the company website. The site runs on Linux, PHP and Apache and uses an EC2 an autoscaling group behind an Application Load Balancer (ALB). After an initial architecture assessment you have found multiple vulnerabilities and configuration issues. The dev team is swamped and will not be able to remediate code level issues for several weeks. Your mission in this workshop round is to build an effective set of controls that mitigate common attack vectors against web applications, and provide you with the monitoring capabilities needed to react to emerging threats when they occur. Level : Intermediate - Advanced Duration : 1 hour CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User Builder Session Architecture Here is a diagram of the architecture. As mentioned above, the environment contains two Web servers running Apache on Linux behind and Application Load Balancer. Feel free to refer to this diagram if you have questions throughout this exercise. Click here to proceed to the Getting Started phase.","title":"Scenario"},{"location":"builder-session/#supercharging-your-workload-defenses-with-aws-waf-amazon-inspector-and-aws-systems-manager","text":"Welcome to the AWS Supercharging your Workload Defenses Builder Session! In this builder session, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use AWS Web Application Firewall (WAF), Amazon Inspector and AWS Systems Manager to identify the vulnerabilities and remediate them.","title":"Supercharging your workload defenses with AWS WAF, Amazon Inspector and AWS Systems Manager"},{"location":"builder-session/#scenario","text":"Welcome to Widgets LLC! You have just joined the team and your first task is to enhance security for the company website. The site runs on Linux, PHP and Apache and uses an EC2 an autoscaling group behind an Application Load Balancer (ALB). After an initial architecture assessment you have found multiple vulnerabilities and configuration issues. The dev team is swamped and will not be able to remediate code level issues for several weeks. Your mission in this workshop round is to build an effective set of controls that mitigate common attack vectors against web applications, and provide you with the monitoring capabilities needed to react to emerging threats when they occur. Level : Intermediate - Advanced Duration : 1 hour CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User","title":"Scenario"},{"location":"builder-session/#builder-session-architecture","text":"Here is a diagram of the architecture. As mentioned above, the environment contains two Web servers running Apache on Linux behind and Application Load Balancer. Feel free to refer to this diagram if you have questions throughout this exercise. Click here to proceed to the Getting Started phase.","title":"Builder Session Architecture"},{"location":"builder-session/assess/","text":"Supercharging your Workload Defenses - Assess Phase In the previous Build Phase, you either built a CloudFormation stack or you learned that AWS provided a CloudFormation stack as part of an event. The CloudFormation stack contains a PHP website on Amazon EC2 instances behind an application load balancer. You are now going to assess the posture of the site and then add an AWS WAF Web ACL to your site. In this section you will do the following tasks: Examine the stack that you built and its tags Install the Inspector Agent on the Amazon EC2 instances Use Amazon Inspector to scan the instances Use your Red Team Host to test for website vulnerabilities Examine the stack that you built and its tags Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. If the console looks different than this, you may be using a newer version of the console. In that case, click on the link that has the three horizontal bars on it and then click Previous Console . Locate the stack you created. In this documentation, the name of the stack is pww . If AWS built the stack for you, it may be a much longer name that stars with \"module\" with a random string after that. Regardless, copy this stack name into a scratch file on your workstation in case you need it later. Click the check box to the left of the stack name and then click the Resources tab below. You will see a list of resources that were deployed by the stack as shown in the figure below. The Type column lists the type of the resouces. Notice that you will not see any resources of type AWS::EC2::Instance. The reason for this is that the CloudFormation stack did not deploy any. The stack did, however, deploy an auto scaling group with a launch configuration that in turn launched the instances. The auto scaling group itself has tags and was configured to propogate the same tags (attributes) to the instances it launches. In a production environment, you may have a large number of resources that spin up and spin down because of the elastiicity that AWS offers. Knowing that the tags will be the same can make it easier for you to manage the environment regardless of how many instances exist at any point in time. You will now learn how to look up the Amazon EC2 instances using tags. Go to the Amazon EC2 console and look for instances having a name that begins with the stack name followed by -node , pww-node in this example. If you cannot see them, type the instance name ( pww-node in this case) into the search box. Select one of them by checking the box to the left of the instance and then click on the Tags tab. You should see a table like that in the figure below. Notice that the instance has tags reflecting the CloudFormation stack name and stack id. These tags are added because of settings in the auto scaling group which propogate tags to newly created instances. You have now learned about the tags that you can use to look up AWS resources. You will take advantage of this feature when you set up Amazon Inspector later in this phase. Install the Inspector Agent on the Amazon EC2 instances Now that you know how to identify the instances in the environment, you need to install the Amazon Inspector agent on them. AWS Systems Manager provides a way for you to run commands across your Amazon EC2 instances. The commands are defined in documents . AWS provides a document that you will use to install the Amazon Inspector agent. You will use tags to identify the instances on which to apply the document. Go to the AWS Systems Manager console. Under the Actions menu on the left, click Run Command . You will be taken to the AWS Systems Manager Run Command home screen. Click the Run a Command button and the Run a Command screen will appear. In the Command document window, page through the available documents until you find the document named AmazonInspector-ManageAWSAgent . Click the radio button to the left of that document as shown in the figure below. Scroll further down until you can see the Targets window. Click the Specifying a tag radio button. For the tag key, enter aws:cloudformation:stack-name . For the value enter the name of the CloudFormation stack you created ( pww in this example) and click Add . Your screen should be similar to the figure below. Scroll down to the Output options window. Clear the box next to Enable writing to an S3 bucket as shown in the figure below. Scroll to the bottom of the screen and click the Run button. You will then be be taken to the command status window while the installation of the Amazon Inspector is running. You can periodically update the command status by clicking on the refresh button within the window. After the commands finish running, the Overall status should be Success as shown in the figure below. The number of instances may vary based on the version of the template. You have now installed the Amazon Inspector agent on the instances in the environment. Use Amazon Inspector to scan the instances Configure the Amazon Inspector target Go to the Amazon Inspector console and click Get Started if prompted. If you see a \"Welcome to Amazon Inspector\" wizard appear, click Cancel . You will set up Amazon Inspector manually so you can become more familiar with the service. Click Assessment Targets on the left menu and then click the Create button. Scroll down to the Assessment Target window. In the Name field, enter a name for the target. For example, given that the stack name in this example is pww , you can enter pww targets or another name of your choosing. In the Use Tags section, select aws:cloudformation:stack-name for the key from the drop down list and select the name of the stack ( pww in this example) from the drop down value list. Uncheck the Install Agents check box since we have already installed the agent. Your screen should look similar to the figure below. Click the Save button to save the target definition. Inspector may prompt you for permission to create a service linked role to give the Amazon Inspector service permission to retrieve information about your instances. If you see a prompt like the one in the figure below, click Ok to create the role. You have now created an Amazon Inspector target that identifies the instances that would be assessed. The target selects instances based on tag values. In this case, the tag you are using is aws:cloudformation:stack-name which is set to the name of the CloudFormation stack. In particular, the tag is added to the auto scaling launch configuration which is configured to propogate the tag to the Amazon EC2 instances that it launches. Because of this, Amazon Inspector will automatically scan new instances that may appear over the lifetime of the environment. This is an example of how the elasticity of the AWS cloud when combined with tagging can enable you to support dynamic environments. Configure the Amazon Inspector template and run the assessment Now that you have created an Amazon Inspector target, you will now create an Amazon Inspector tepmlate. You use templates to define the Amazon Inspector targets and rule packages that comprise an assessment run. Go to the Amazon Inspector console, click Assessment templates on the menu, and then click Create . In the Name field, enter a name for the template. In the Target name field, select the target you previously created from the list of options. In the Rules packages field, select Common Vulnerabilities and Exposures and Security Best Practices . In the Duration field, select 15 minutes . Do not accept the default value! In the Assessment Schedule, uncheck (turn off) the Set up recurring assessment runs so that the assessment template will only run a one-time assessment. Scroll to the bottom and click the Create and run button to save the template and run the assessment. Depending on the size of your screen, you may have to scroll down multiple windows. If you cannot click Create and run , make sure you unchecked the box in the previous step and try again. The assessment will start and will take 15 minutes to compete. On the Amazon Inspector menu, click Assessment runs . You should see an entry for the assesment you just started. While the assessment is running, the status will be Collecting data . Periodically refresh the screen to see the current status. When the assessment run ends, the status will change to Analysis complete. The assessment will run for approximately 15 minutes. While you are waiting, continue with the steps below. Look up the Stack Outputs for the Perimeter Layer Go to the stack outputs and look for the website URL stored in the albEndpoint output value. Test access to the site by right clicking and opening in a new tab. Note the URL for your site as this will be used throughout this workshoop round. While still in stack outputs, right click the link in RedTeamHostSession and open in new tab. This will launch an AWS Systems Manager Session Manager to the host you will use to perform add hock scans against your site URL. AWS Systems Manager Session Manager Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon EC2 instances through an interactive one-click browser-based shell or through the AWS CLI. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys. Website Scanning Environment and Tools In order to test your AWS WAF ruleset, this lab has been configured with two scanning capabilities; a Red Team Host where you can invoke manual scanning and an automated scanner which runs from outside your lab environment. The scanner performs 10 basic tests designed to help simulate and mitigate common web attack vectors. Canary GET - Should not be blocked Canary POST - Should not be blocked SQL Injection (SQLi) in Query String SQL Injection (SQLi) in Cookie Cross Site Scripting (XSS) in Query String Cross Site Scripting (XSS) in Body Note about Tests These basic tests are designed to provide common examples you can use to test AWS WAF functionality. You should perform thorough analysis and testing when implementing rules into your production environments. Once you have started a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint The scanner.py script will run each of the tests above and report back the following information: Request : The HTTP request command used. Test Name : The name of the test from list above. Result : The HTTP status code returned. The logic in the scanner script color codes the response as follows: Green : 403 - Forbidden ( Except for canary GET and POST tests. ) Red : 200 - OK Blue : 404 - Not Found Yellow : 500 - Internal Server Error As you can see by running the script there are several vulnerabilities that need to be addressed. In the remnediate phase you will configure an AWS WAF Web ACL to block these requests. When AWS WAF blocks a web request based on the conditions that you specify, it returns HTTP status code 403 (Forbidden). For a full view of the request and response information, you can paste the Request command directly into the console and add the --debug argument. Note about Testing Tool The scanner.py script uses an open source HTTP client called httpie . HTTPie\u2014aitch-tee-tee-pie\u2014is a command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more. Click here to proceed to the Remediate Phase.","title":"Assess Phase"},{"location":"builder-session/assess/#supercharging-your-workload-defenses-assess-phase","text":"In the previous Build Phase, you either built a CloudFormation stack or you learned that AWS provided a CloudFormation stack as part of an event. The CloudFormation stack contains a PHP website on Amazon EC2 instances behind an application load balancer. You are now going to assess the posture of the site and then add an AWS WAF Web ACL to your site. In this section you will do the following tasks: Examine the stack that you built and its tags Install the Inspector Agent on the Amazon EC2 instances Use Amazon Inspector to scan the instances Use your Red Team Host to test for website vulnerabilities","title":"Supercharging your Workload Defenses - Assess Phase"},{"location":"builder-session/assess/#examine-the-stack-that-you-built-and-its-tags","text":"Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. If the console looks different than this, you may be using a newer version of the console. In that case, click on the link that has the three horizontal bars on it and then click Previous Console . Locate the stack you created. In this documentation, the name of the stack is pww . If AWS built the stack for you, it may be a much longer name that stars with \"module\" with a random string after that. Regardless, copy this stack name into a scratch file on your workstation in case you need it later. Click the check box to the left of the stack name and then click the Resources tab below. You will see a list of resources that were deployed by the stack as shown in the figure below. The Type column lists the type of the resouces. Notice that you will not see any resources of type AWS::EC2::Instance. The reason for this is that the CloudFormation stack did not deploy any. The stack did, however, deploy an auto scaling group with a launch configuration that in turn launched the instances. The auto scaling group itself has tags and was configured to propogate the same tags (attributes) to the instances it launches. In a production environment, you may have a large number of resources that spin up and spin down because of the elastiicity that AWS offers. Knowing that the tags will be the same can make it easier for you to manage the environment regardless of how many instances exist at any point in time. You will now learn how to look up the Amazon EC2 instances using tags. Go to the Amazon EC2 console and look for instances having a name that begins with the stack name followed by -node , pww-node in this example. If you cannot see them, type the instance name ( pww-node in this case) into the search box. Select one of them by checking the box to the left of the instance and then click on the Tags tab. You should see a table like that in the figure below. Notice that the instance has tags reflecting the CloudFormation stack name and stack id. These tags are added because of settings in the auto scaling group which propogate tags to newly created instances. You have now learned about the tags that you can use to look up AWS resources. You will take advantage of this feature when you set up Amazon Inspector later in this phase.","title":"Examine the stack that you built and its tags"},{"location":"builder-session/assess/#install-the-inspector-agent-on-the-amazon-ec2-instances","text":"Now that you know how to identify the instances in the environment, you need to install the Amazon Inspector agent on them. AWS Systems Manager provides a way for you to run commands across your Amazon EC2 instances. The commands are defined in documents . AWS provides a document that you will use to install the Amazon Inspector agent. You will use tags to identify the instances on which to apply the document. Go to the AWS Systems Manager console. Under the Actions menu on the left, click Run Command . You will be taken to the AWS Systems Manager Run Command home screen. Click the Run a Command button and the Run a Command screen will appear. In the Command document window, page through the available documents until you find the document named AmazonInspector-ManageAWSAgent . Click the radio button to the left of that document as shown in the figure below. Scroll further down until you can see the Targets window. Click the Specifying a tag radio button. For the tag key, enter aws:cloudformation:stack-name . For the value enter the name of the CloudFormation stack you created ( pww in this example) and click Add . Your screen should be similar to the figure below. Scroll down to the Output options window. Clear the box next to Enable writing to an S3 bucket as shown in the figure below. Scroll to the bottom of the screen and click the Run button. You will then be be taken to the command status window while the installation of the Amazon Inspector is running. You can periodically update the command status by clicking on the refresh button within the window. After the commands finish running, the Overall status should be Success as shown in the figure below. The number of instances may vary based on the version of the template. You have now installed the Amazon Inspector agent on the instances in the environment.","title":"Install the Inspector Agent on the Amazon EC2 instances"},{"location":"builder-session/assess/#use-amazon-inspector-to-scan-the-instances","text":"","title":"Use Amazon Inspector to scan the instances"},{"location":"builder-session/assess/#configure-the-amazon-inspector-target","text":"Go to the Amazon Inspector console and click Get Started if prompted. If you see a \"Welcome to Amazon Inspector\" wizard appear, click Cancel . You will set up Amazon Inspector manually so you can become more familiar with the service. Click Assessment Targets on the left menu and then click the Create button. Scroll down to the Assessment Target window. In the Name field, enter a name for the target. For example, given that the stack name in this example is pww , you can enter pww targets or another name of your choosing. In the Use Tags section, select aws:cloudformation:stack-name for the key from the drop down list and select the name of the stack ( pww in this example) from the drop down value list. Uncheck the Install Agents check box since we have already installed the agent. Your screen should look similar to the figure below. Click the Save button to save the target definition. Inspector may prompt you for permission to create a service linked role to give the Amazon Inspector service permission to retrieve information about your instances. If you see a prompt like the one in the figure below, click Ok to create the role. You have now created an Amazon Inspector target that identifies the instances that would be assessed. The target selects instances based on tag values. In this case, the tag you are using is aws:cloudformation:stack-name which is set to the name of the CloudFormation stack. In particular, the tag is added to the auto scaling launch configuration which is configured to propogate the tag to the Amazon EC2 instances that it launches. Because of this, Amazon Inspector will automatically scan new instances that may appear over the lifetime of the environment. This is an example of how the elasticity of the AWS cloud when combined with tagging can enable you to support dynamic environments.","title":"Configure the Amazon Inspector target"},{"location":"builder-session/assess/#configure-the-amazon-inspector-template-and-run-the-assessment","text":"Now that you have created an Amazon Inspector target, you will now create an Amazon Inspector tepmlate. You use templates to define the Amazon Inspector targets and rule packages that comprise an assessment run. Go to the Amazon Inspector console, click Assessment templates on the menu, and then click Create . In the Name field, enter a name for the template. In the Target name field, select the target you previously created from the list of options. In the Rules packages field, select Common Vulnerabilities and Exposures and Security Best Practices . In the Duration field, select 15 minutes . Do not accept the default value! In the Assessment Schedule, uncheck (turn off) the Set up recurring assessment runs so that the assessment template will only run a one-time assessment. Scroll to the bottom and click the Create and run button to save the template and run the assessment. Depending on the size of your screen, you may have to scroll down multiple windows. If you cannot click Create and run , make sure you unchecked the box in the previous step and try again. The assessment will start and will take 15 minutes to compete. On the Amazon Inspector menu, click Assessment runs . You should see an entry for the assesment you just started. While the assessment is running, the status will be Collecting data . Periodically refresh the screen to see the current status. When the assessment run ends, the status will change to Analysis complete. The assessment will run for approximately 15 minutes. While you are waiting, continue with the steps below.","title":"Configure the Amazon Inspector template and run the assessment"},{"location":"builder-session/assess/#look-up-the-stack-outputs-for-the-perimeter-layer","text":"Go to the stack outputs and look for the website URL stored in the albEndpoint output value. Test access to the site by right clicking and opening in a new tab. Note the URL for your site as this will be used throughout this workshoop round. While still in stack outputs, right click the link in RedTeamHostSession and open in new tab. This will launch an AWS Systems Manager Session Manager to the host you will use to perform add hock scans against your site URL. AWS Systems Manager Session Manager Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon EC2 instances through an interactive one-click browser-based shell or through the AWS CLI. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys.","title":"Look up the Stack Outputs for the Perimeter Layer"},{"location":"builder-session/assess/#website-scanning-environment-and-tools","text":"In order to test your AWS WAF ruleset, this lab has been configured with two scanning capabilities; a Red Team Host where you can invoke manual scanning and an automated scanner which runs from outside your lab environment. The scanner performs 10 basic tests designed to help simulate and mitigate common web attack vectors. Canary GET - Should not be blocked Canary POST - Should not be blocked SQL Injection (SQLi) in Query String SQL Injection (SQLi) in Cookie Cross Site Scripting (XSS) in Query String Cross Site Scripting (XSS) in Body Note about Tests These basic tests are designed to provide common examples you can use to test AWS WAF functionality. You should perform thorough analysis and testing when implementing rules into your production environments. Once you have started a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint The scanner.py script will run each of the tests above and report back the following information: Request : The HTTP request command used. Test Name : The name of the test from list above. Result : The HTTP status code returned. The logic in the scanner script color codes the response as follows: Green : 403 - Forbidden ( Except for canary GET and POST tests. ) Red : 200 - OK Blue : 404 - Not Found Yellow : 500 - Internal Server Error As you can see by running the script there are several vulnerabilities that need to be addressed. In the remnediate phase you will configure an AWS WAF Web ACL to block these requests. When AWS WAF blocks a web request based on the conditions that you specify, it returns HTTP status code 403 (Forbidden). For a full view of the request and response information, you can paste the Request command directly into the console and add the --debug argument. Note about Testing Tool The scanner.py script uses an open source HTTP client called httpie . HTTPie\u2014aitch-tee-tee-pie\u2014is a command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more. Click here to proceed to the Remediate Phase.","title":"Website Scanning Environment and Tools"},{"location":"builder-session/build/","text":"Supercharging your Workload Defenses - Build Phase Environment setup To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. Attention For participants in the re:Inforce Builder Session, FND305 - Supercharging your workload defenses with AWS WAF, Amazon Inspector, and AWS Systems Manager , you do not need to deploy the CloudFormation Stack as it has already been created. Follow the instructions in the drop down directly below for Event Engine . Click here if you're at an AWS event where the Event Engine is being used Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console Connect to the AWS Console via Event Engine and browse to the CloudFormation Console in the N. Virginia region (us-east-1). Move on to Assess phase . Note About Workshop and AWS Account If you are not using an AWS account provided by the Workshop Team, we stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. If you are using your own account or an account provided by the Workshop Team, proceed with CloudFormation deployment in the preferred AWS region below: US East 2 (Ohio) US West 2 (Oregon) US East 1 (N. Virginia) EU West 1 (Ireland) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Click Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. Click here to proceed to the Assess Phase.","title":"Build Phase"},{"location":"builder-session/build/#supercharging-your-workload-defenses-build-phase","text":"","title":"Supercharging your Workload Defenses - Build Phase"},{"location":"builder-session/build/#environment-setup","text":"To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. Attention For participants in the re:Inforce Builder Session, FND305 - Supercharging your workload defenses with AWS WAF, Amazon Inspector, and AWS Systems Manager , you do not need to deploy the CloudFormation Stack as it has already been created. Follow the instructions in the drop down directly below for Event Engine . Click here if you're at an AWS event where the Event Engine is being used Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console Connect to the AWS Console via Event Engine and browse to the CloudFormation Console in the N. Virginia region (us-east-1). Move on to Assess phase . Note About Workshop and AWS Account If you are not using an AWS account provided by the Workshop Team, we stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. If you are using your own account or an account provided by the Workshop Team, proceed with CloudFormation deployment in the preferred AWS region below: US East 2 (Ohio) US West 2 (Oregon) US East 1 (N. Virginia) EU West 1 (Ireland) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Click Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. Click here to proceed to the Assess Phase.","title":"Environment setup"},{"location":"builder-session/cleanup/","text":"Supercharging your Workload Defenses - Cleanup Attention For participants using an AWS provided account, you do not need to complete the Cleanup phase. Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"Cleanup Phase"},{"location":"builder-session/cleanup/#supercharging-your-workload-defenses-cleanup","text":"Attention For participants using an AWS provided account, you do not need to complete the Cleanup phase. Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"Supercharging your Workload Defenses - Cleanup"},{"location":"builder-session/getting-started/","text":"Supercharging your Workload Defenses - Getting Started Attention If you are attending the re:Inforce Builder Session FND305 - Supercharging your workload defenses with AWS WAF, Amazon Inspector, and AWS Systems Manager , AWS has already deployed the CloudFormation Stack. Click the drop down directly below for more information about the_Event Engine_.** Click here if you're at an AWS event where the Event Engine is being used Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console Connect to the AWS Console via Event Engine and browse to the CloudFormation Console in the N. Virginia region (us-east-1). Move on to Assess phase . Create or Identify Exisitng AWS account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Note About Workshop and AWS Account We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . Click here to proceed to the Build Phase.","title":"Getting Started"},{"location":"builder-session/getting-started/#supercharging-your-workload-defenses-getting-started","text":"Attention If you are attending the re:Inforce Builder Session FND305 - Supercharging your workload defenses with AWS WAF, Amazon Inspector, and AWS Systems Manager , AWS has already deployed the CloudFormation Stack. Click the drop down directly below for more information about the_Event Engine_.** Click here if you're at an AWS event where the Event Engine is being used Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console Connect to the AWS Console via Event Engine and browse to the CloudFormation Console in the N. Virginia region (us-east-1). Move on to Assess phase .","title":"Supercharging your Workload Defenses - Getting Started"},{"location":"builder-session/getting-started/#create-or-identify-exisitng-aws-account","text":"In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Note About Workshop and AWS Account We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account.","title":"Create or Identify Exisitng AWS account"},{"location":"builder-session/getting-started/#create-an-admin-user","text":"If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created.","title":"Create an admin user"},{"location":"builder-session/getting-started/#add-credits-optional","text":"If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . Click here to proceed to the Build Phase.","title":"Add credits (optional)"},{"location":"builder-session/remediate/","text":"Supercharging your Workload Defenses - Remediate Phase In the previous Phase, you identified several vulnerabilities in your web application. You are now going to design and implement an AWS WAF ruleset to help mitigate these vulnerabilities. In this section you will do the following tasks: Identify the WAF ACL for your site AWS WAF Rule design and considerations Console Walkthrough - Creating a WAF Condition and Rule WAF Rule Creation and Solutions Identify the WAF ACL for your Site If needed, go to https://console.aws.amazon.com/console/home . You will be redirected to the AWS Management Console dashboard on successful login: Make sure you select the appropriate AWS Region when working in the AWS Management Console (top right corner, on the menu bar). From the Management Console dashboard, navigate to the AWS WAF & Shield service console. You can do that several ways: Type \u201cwaf\u201d in the AWS services panel search box and select the resulting option Expand the Services drop down menu (top left on the menu bar) and choose WAF & Shield Expand the All services area of the AWS services panel and choose WAF & Shield Once selected, you will be redirected to the AWS WAF & AWS Shield service console. You may see an initial landing page at first. Choose Go to AWS WAF: 3. In the side bar menu on the left, pick the Web ACLs option under the AWS WAF heading. If the list of Web ACLs appears empty select the correct AWS Region as indicated on your credentials card in the Filter dropdown. If you are sharing the same account with other participants you can identify your WAF ACL by the Id in the stack outputs. 4. Click on the WAF Web ACL Name to select the existing Web ACL. Once the detail pane is loaded on the left of your screen, you will see 2 tabs: Requests and Rules. Toggle to Rules: Validate that you are able to see a pre-existing rule, configured to block requests, and that your Web ACL is associated with an Application load balancer resource. You can drill down further into the properties of the existing rule, by clicking on the rule name. You should see 2 entries into the associated IP address list for the loopback/localhost IP addresses (127.0.0.0/8, ::1/128). AWS WAF Rule Design and Considerations Basics AWS WAF rules consist of conditions. Conditions are lists of specific filters (patterns) that are being matched against the HTTP request components processed by AWS WAF. The filters, including their attributes, are specific to the type of condition supported by AWS WAF. A condition, as a whole, is considered as matched , if any one of the listed filters is matched. Rules contain one or more conditions. Each condition attached to a rule is called a predicate. Predicates are evaluated using Boolean logic. A predicate is evaluated as matched or not matched (negated predicted), and multiple predicates are evaluated using Boolean AND \u2013 all predicates must match for the rule action to be triggered. Web ACLs are ordered lists of rules. They are evaluated in order for each HTTP request and the action of the first matching rule is taken by the WAF engine, whether that is to allow, block or count the request. If no rule matches, the default action of the web ACL prevails. Note About Conditions and Rules Conditions and rules are reusable resources within the region in which they are created. You should consider the effects of changes to WAF conditions and rules in your organizations change control procedures. Note About This Section In order to illustrate the process of creating WAF conditions and rules, we will walk through the creation of the first rule in your WAF ACL. The complete list of threats and solutions is available in the WAF Rule Creation and Solutions section. Rule Design Considerations: To create a rule, you have to create the relevant match conditions first. This process requires planning for effective rule building. Use the following guiding questions: What is the intended purpose of the rule? What HTTP request components apply to the purpose of the rule? Do you already have conditions targeting those request components that you can reuse? Is that desirable? How can you define the purpose of the rule in a Boolean logic expression? What conditions do you need to create to implement the logic? Are any transformations relevant to my input content type? AWS WAF Concepts: The following illustration shows AWS WAF Conditions, Rules and Web ACL's. The following illustration shows how AWS WAF checks the rules and performs the actions based on those rules. Example Rule Design and Creation: As an example, lets say we want to build a rule to detect and block SQL Injection in received in query strings. Let\u2019s see how these questions help us plan the implementation of the rule. This walkthrough will get you started with the ruleset required to mitigate the simulated threats in the workshop. It's purpose is to help you better understand the rule creation process. You will create the remaining rules from solution hints provided below. Sample Rule purpose: Detect SQL Injection in query string, use \u2018block\u2019 action in Web ACL HTTP request components: Request Method \u2013 form input typically gets submitted using a GET HTTP request method Query String \u2013 the SQL injection attempt is located in the query string Define the purpose of the rule using Boolean logic: If Query String contains suspected SQL Injection then block Sample Rule - Conditions to implement: SQL injection Match Condition targeting the request Query string Relevant transformations: SQL Injection Match Condition query strinb is URL encoded, so we will apply the URL_DECODE transformation. Rules to implement: Rule with 1 predicate matching SQL injection condition Console Walkthrough - Creating a Condition and Rule In the AWS WAF console, create a SQL injection condition by selecting SQL injection matching from the side-bar menu to the left of the console, under the Conditions heading. Click on Create Condition : 3. Provide filterSQLi for the Name and select the region where you deployed the stack. Add a filter (pattern) to the condition. Set the Part of the request to filter on to Query string and set the Transformation to URL decode . Click Add filter and then click Create . 4. With the condition created, and any additional conditions created based on need as well, you are ready to create a rule. In the AWS WAF console, select Rules from the side-bar menu to the left of the console, under the AWS WAF heading. 5. Click on Create Rule : 6. Provide matchSQLi for the name, metric name and sect the region where you deployed the stack. Set the rule type to Regular rule . 7. Add a condition to the rule. For our rule example, choose \u201cWhen a request\u201d does (no negation) match at least one of the filters in the SQL injection match condition . Choose the SQL injection condition you have previously created. 8. Click Add Condition and click Create at the bottom of the screen. 9. Follow the steps in the Identify the WAF ACL for your site section above to go back to the Rules tab of your web ACL. 10. Click Edit web ACL . 11. In the Rules dropdown, select your rule, and click Add rule to web ACL . 12. Reorder the rules as appropriate for your use case. 13. Click Update to persist the changes. Additional Resources For a more comprehensive discussion of common vulnerabilities for web applications, as well as how to mitigate them using AWS WAF, and other AWS services, please refer to the Use AWS WAF to Mitigate OWASP\u2019s Top 10 Web Application Vulnerabilities whitepaper . Perimeter Layer - WAF Rule Creation and Solutions In this phase, we will have a set of 6 exercises walking you through the process of building a basic mitigation rule set for common vulnerabilities. We will build these rules from scratch, so you can gain familiarity with the AWS WAF programming model and you can then write rules specific to your applications. Note About Excersise Solutions For the excercises below, you will find the high level description and solution configuration for your web ACL. You can test your ACL ruleset at any time using the Red Team Host. . 1. SQL Injection Mitigation Use the SQL injection as well as string matching conditions to build rules that mitigate injection attacks. Consider the following: - How does your web application accept end-user input (whether directly or indirectly). Which HTTP request components does that input get inserted into? - What kind of content encoding considerations do you need to factor in for the input format? - What considerations do you need to account for in regards to false positives? For example, does your application legitimately need to accept SQL statements as input? How do the requirements derived from the above questions affect your solution? Solution update the SQL injection condition named filterSQLi with 2 additional filters query_string, url decode You should have created this filter in the walk through body, html decode header, cookie, url decode create SQLi rule named matchSQLi type regular does match SQLi condition: filterSQLi Host Layer - Examine the Inspector findings and configure Patch Manager Examine the Inspector findings After the assessment run has completed, go to the Amazon Inspector console and click Assessment runs . The window should be similar to what appears below. On the line that represents your most recent run, make note of the number in the Findings column (22 in this diagram). After you perform the remediation later in this workshop, that number should decrease. Click on the number in the Findings column. The findings associated with the run will appear as shown below. You will see findings for each of the rules packages that you used in the assessment. The number of findings often varies by the age of the AMI (Amazon Machine Image) because older AMIs typically have more vulnerabilities than newer AMIs. Choose one of the findings associated with the Common Vulnerabilities and Exposures rule package. An example appears below. Note that there is a link in the recommendation on which you can click to see the CVE entry. Now that you have run the assessment and seen the findings you are ready to perform some remediation. Identify the stack that you built Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later. In the previous Assess Phase, you installed Amazon Inspector on the instances that were launched as a result of the CloudFormation stack. You will now use AWS Systems Manager Patch Manager to apply patches. You will use tags to select the instances as well. In this section you will do the following tasks: Use AWS Systems Manager Patch Manager to set up patching Use AWS Systems Manager Run Command to check the status of the patching Use AWS Systems Manager Patch Manager Go to the Systems Manager console and select Patch Manager. If you see the Patch Manager home screen, then click the default patch baselines link as shown below: You will now see a list of default patch baselines that are used to patch each operating system supported by Patch Manager. The default patch baseline only patches major security issues. You are going to crate a new Amazon Linux 2 patch baseline that will patch more things and make this new patch baseline the default. Click Create patch baseline . In the Name field, enter a name to give the new baseline such as pww . In the Operating system field, select Amazon Linux 2 . In the Approval rules section, check the box under Include non-security updates . IMPORTANT NOTE: Depending on the size of the screen, the box may not align with the title Include non-security updates . See the figure below. Click the Create patch baseline button at the bottom of the screen. You should now see the new patch baseline in the list of baselines. You may need to refresh the browser window to see it. This new patch baseline includes non-security patches. Note at the end of the line representing the newly created patch baseine you will see No in the Default Baseline column as shown in the figure below. Click the radio button on the line with the newly created patch baseline. From the Actions menu at the top select Set default patch baseline . You will be asked to confirm this. You have just set the default patch baseline for Amazon Linux 2 to use the patch baseline you just created that includes non-security patches. You should now see Yes at the end of the patch baseline as shown below. Click Configure patching In the Configure patching screen, go to the Instances to patch section and click the Enter instance tags radio button. In the Instance tags field, enter aws:cloudformation:stack-name into the Tag key field. In the Tag value field, enter the stack name that you created earlier. Click Add . In the Patching schedule section, click the Skip scheduling and patch instances now radio button. In the Patching operation section, click the Scan and install radio button if it is not alerady selected. Your screen should look similar to the image below. Click the Configure patching button at the bottom of the window. You will see a message at the top of your screen saying that Patch Manager will use Run Command to patch the instances. Run Command is another feature of AWS Systems Manager that runs a command across multiple Amazon EC2 instances. Patch Manager build the commands necessary to perform the patching and is using Run Command to actually execute the commands. Check the patching status You are now going to examine the status of the patching operation by using AWS Systems Manager Run Command. Go to the AWS Systems Manager Console and click Run Command on the left menu. If the patching is still running, you will see the entry in the Commands tab. Wait for the command to finish. Refresh the screen if necessary to update the display. Once the command has finished, click on Command history . Look for the line containing the document name AWS-RunPatchBaseline . That represents the Patch Manager activity.Your screen should look similar to the image below. Click on the Command ID link to see more details about the command. You will see a line for each target with a link referencing the Instance ID. If you then click on the Instance ID , you will see each step of the command that is executed. Note that some steps are skipped because they do not apply to the operating system of the instance. Also, you only see the first part of the command output. If you want to see all of the output you can configure Systems Manager to direct the output into an Amazon S3 bucket. You have now completed the patching operation. In the Verify Phase, you will re-assess the environment with Amazon Inspector. 2. Launch Second Inspector Assessment Run Go to the Amazon Inspector console, click Assessment templates on the menu. Locate the template that you created during the Assess Phase and check the box at the left end of that row. Click Run . This will launch another assessment run. Click Assessmnet runs and periodically refresh the screen. Wait until the status for the run changes to Analysis complete . The run will take approximately 15 minutes to complete. While you are waiting, continue with the steps below. Perimeter Layer - WAF Rule Creation and Solutions (Continued) 1. Cross Site Scripting Mitigation Use Cross-site scripting, as well as string matching conditions to build rules that mitigate cross site scripting attacks. Solution create Cross-site scripting condition named filterXSS with 4 filters query_string, url decode body, html decode body, url decode header, cookie, url decode create a String and regex matching String match type condition named filterXSSPathException with 1 filter. This demonstrates how to add an expception for the XSS rule. uri, starts with, no transform, /reportBuilder/Editor.aspx create a rule named matchXSS type regular does match XSS condition: filterXSS does not match string match condition: filterXSSPathException add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked Click here to proceed to the Verify Phase.","title":"Remediate Phase"},{"location":"builder-session/remediate/#supercharging-your-workload-defenses-remediate-phase","text":"In the previous Phase, you identified several vulnerabilities in your web application. You are now going to design and implement an AWS WAF ruleset to help mitigate these vulnerabilities. In this section you will do the following tasks: Identify the WAF ACL for your site AWS WAF Rule design and considerations Console Walkthrough - Creating a WAF Condition and Rule WAF Rule Creation and Solutions","title":"Supercharging your Workload Defenses - Remediate Phase"},{"location":"builder-session/remediate/#identify-the-waf-acl-for-your-site","text":"If needed, go to https://console.aws.amazon.com/console/home . You will be redirected to the AWS Management Console dashboard on successful login: Make sure you select the appropriate AWS Region when working in the AWS Management Console (top right corner, on the menu bar). From the Management Console dashboard, navigate to the AWS WAF & Shield service console. You can do that several ways: Type \u201cwaf\u201d in the AWS services panel search box and select the resulting option Expand the Services drop down menu (top left on the menu bar) and choose WAF & Shield Expand the All services area of the AWS services panel and choose WAF & Shield Once selected, you will be redirected to the AWS WAF & AWS Shield service console. You may see an initial landing page at first. Choose Go to AWS WAF: 3. In the side bar menu on the left, pick the Web ACLs option under the AWS WAF heading. If the list of Web ACLs appears empty select the correct AWS Region as indicated on your credentials card in the Filter dropdown. If you are sharing the same account with other participants you can identify your WAF ACL by the Id in the stack outputs. 4. Click on the WAF Web ACL Name to select the existing Web ACL. Once the detail pane is loaded on the left of your screen, you will see 2 tabs: Requests and Rules. Toggle to Rules: Validate that you are able to see a pre-existing rule, configured to block requests, and that your Web ACL is associated with an Application load balancer resource. You can drill down further into the properties of the existing rule, by clicking on the rule name. You should see 2 entries into the associated IP address list for the loopback/localhost IP addresses (127.0.0.0/8, ::1/128).","title":"Identify the WAF ACL for your Site"},{"location":"builder-session/remediate/#aws-waf-rule-design-and-considerations","text":"","title":"AWS WAF Rule Design and Considerations"},{"location":"builder-session/remediate/#basics","text":"AWS WAF rules consist of conditions. Conditions are lists of specific filters (patterns) that are being matched against the HTTP request components processed by AWS WAF. The filters, including their attributes, are specific to the type of condition supported by AWS WAF. A condition, as a whole, is considered as matched , if any one of the listed filters is matched. Rules contain one or more conditions. Each condition attached to a rule is called a predicate. Predicates are evaluated using Boolean logic. A predicate is evaluated as matched or not matched (negated predicted), and multiple predicates are evaluated using Boolean AND \u2013 all predicates must match for the rule action to be triggered. Web ACLs are ordered lists of rules. They are evaluated in order for each HTTP request and the action of the first matching rule is taken by the WAF engine, whether that is to allow, block or count the request. If no rule matches, the default action of the web ACL prevails. Note About Conditions and Rules Conditions and rules are reusable resources within the region in which they are created. You should consider the effects of changes to WAF conditions and rules in your organizations change control procedures. Note About This Section In order to illustrate the process of creating WAF conditions and rules, we will walk through the creation of the first rule in your WAF ACL. The complete list of threats and solutions is available in the WAF Rule Creation and Solutions section.","title":"Basics"},{"location":"builder-session/remediate/#rule-design-considerations","text":"To create a rule, you have to create the relevant match conditions first. This process requires planning for effective rule building. Use the following guiding questions: What is the intended purpose of the rule? What HTTP request components apply to the purpose of the rule? Do you already have conditions targeting those request components that you can reuse? Is that desirable? How can you define the purpose of the rule in a Boolean logic expression? What conditions do you need to create to implement the logic? Are any transformations relevant to my input content type?","title":"Rule Design Considerations:"},{"location":"builder-session/remediate/#aws-waf-concepts","text":"The following illustration shows AWS WAF Conditions, Rules and Web ACL's. The following illustration shows how AWS WAF checks the rules and performs the actions based on those rules.","title":"AWS WAF Concepts:"},{"location":"builder-session/remediate/#example-rule-design-and-creation","text":"As an example, lets say we want to build a rule to detect and block SQL Injection in received in query strings. Let\u2019s see how these questions help us plan the implementation of the rule. This walkthrough will get you started with the ruleset required to mitigate the simulated threats in the workshop. It's purpose is to help you better understand the rule creation process. You will create the remaining rules from solution hints provided below.","title":"Example Rule Design and Creation:"},{"location":"builder-session/remediate/#sample-rule-purpose","text":"Detect SQL Injection in query string, use \u2018block\u2019 action in Web ACL","title":"Sample Rule purpose:"},{"location":"builder-session/remediate/#http-request-components","text":"Request Method \u2013 form input typically gets submitted using a GET HTTP request method Query String \u2013 the SQL injection attempt is located in the query string","title":"HTTP request components:"},{"location":"builder-session/remediate/#define-the-purpose-of-the-rule-using-boolean-logic","text":"If Query String contains suspected SQL Injection then block","title":"Define the purpose of the rule using Boolean logic:"},{"location":"builder-session/remediate/#sample-rule-conditions-to-implement","text":"SQL injection Match Condition targeting the request Query string","title":"Sample Rule - Conditions to implement:"},{"location":"builder-session/remediate/#relevant-transformations","text":"SQL Injection Match Condition query strinb is URL encoded, so we will apply the URL_DECODE transformation.","title":"Relevant transformations:"},{"location":"builder-session/remediate/#rules-to-implement","text":"Rule with 1 predicate matching SQL injection condition","title":"Rules to implement:"},{"location":"builder-session/remediate/#console-walkthrough-creating-a-condition-and-rule","text":"In the AWS WAF console, create a SQL injection condition by selecting SQL injection matching from the side-bar menu to the left of the console, under the Conditions heading. Click on Create Condition : 3. Provide filterSQLi for the Name and select the region where you deployed the stack. Add a filter (pattern) to the condition. Set the Part of the request to filter on to Query string and set the Transformation to URL decode . Click Add filter and then click Create . 4. With the condition created, and any additional conditions created based on need as well, you are ready to create a rule. In the AWS WAF console, select Rules from the side-bar menu to the left of the console, under the AWS WAF heading. 5. Click on Create Rule : 6. Provide matchSQLi for the name, metric name and sect the region where you deployed the stack. Set the rule type to Regular rule . 7. Add a condition to the rule. For our rule example, choose \u201cWhen a request\u201d does (no negation) match at least one of the filters in the SQL injection match condition . Choose the SQL injection condition you have previously created. 8. Click Add Condition and click Create at the bottom of the screen. 9. Follow the steps in the Identify the WAF ACL for your site section above to go back to the Rules tab of your web ACL. 10. Click Edit web ACL . 11. In the Rules dropdown, select your rule, and click Add rule to web ACL . 12. Reorder the rules as appropriate for your use case. 13. Click Update to persist the changes. Additional Resources For a more comprehensive discussion of common vulnerabilities for web applications, as well as how to mitigate them using AWS WAF, and other AWS services, please refer to the Use AWS WAF to Mitigate OWASP\u2019s Top 10 Web Application Vulnerabilities whitepaper .","title":"Console Walkthrough - Creating a Condition and Rule"},{"location":"builder-session/remediate/#perimeter-layer-waf-rule-creation-and-solutions","text":"In this phase, we will have a set of 6 exercises walking you through the process of building a basic mitigation rule set for common vulnerabilities. We will build these rules from scratch, so you can gain familiarity with the AWS WAF programming model and you can then write rules specific to your applications. Note About Excersise Solutions For the excercises below, you will find the high level description and solution configuration for your web ACL. You can test your ACL ruleset at any time using the Red Team Host. .","title":"Perimeter Layer - WAF Rule Creation and Solutions"},{"location":"builder-session/remediate/#1-sql-injection-mitigation","text":"Use the SQL injection as well as string matching conditions to build rules that mitigate injection attacks. Consider the following: - How does your web application accept end-user input (whether directly or indirectly). Which HTTP request components does that input get inserted into? - What kind of content encoding considerations do you need to factor in for the input format? - What considerations do you need to account for in regards to false positives? For example, does your application legitimately need to accept SQL statements as input? How do the requirements derived from the above questions affect your solution? Solution update the SQL injection condition named filterSQLi with 2 additional filters query_string, url decode You should have created this filter in the walk through body, html decode header, cookie, url decode create SQLi rule named matchSQLi type regular does match SQLi condition: filterSQLi","title":"1. SQL Injection Mitigation"},{"location":"builder-session/remediate/#host-layer-examine-the-inspector-findings-and-configure-patch-manager","text":"","title":"Host Layer - Examine the Inspector findings and configure Patch Manager"},{"location":"builder-session/remediate/#examine-the-inspector-findings","text":"After the assessment run has completed, go to the Amazon Inspector console and click Assessment runs . The window should be similar to what appears below. On the line that represents your most recent run, make note of the number in the Findings column (22 in this diagram). After you perform the remediation later in this workshop, that number should decrease. Click on the number in the Findings column. The findings associated with the run will appear as shown below. You will see findings for each of the rules packages that you used in the assessment. The number of findings often varies by the age of the AMI (Amazon Machine Image) because older AMIs typically have more vulnerabilities than newer AMIs. Choose one of the findings associated with the Common Vulnerabilities and Exposures rule package. An example appears below. Note that there is a link in the recommendation on which you can click to see the CVE entry. Now that you have run the assessment and seen the findings you are ready to perform some remediation.","title":"Examine the Inspector findings"},{"location":"builder-session/remediate/#identify-the-stack-that-you-built","text":"Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later. In the previous Assess Phase, you installed Amazon Inspector on the instances that were launched as a result of the CloudFormation stack. You will now use AWS Systems Manager Patch Manager to apply patches. You will use tags to select the instances as well. In this section you will do the following tasks: Use AWS Systems Manager Patch Manager to set up patching Use AWS Systems Manager Run Command to check the status of the patching","title":"Identify the stack that you built"},{"location":"builder-session/remediate/#use-aws-systems-manager-patch-manager","text":"Go to the Systems Manager console and select Patch Manager. If you see the Patch Manager home screen, then click the default patch baselines link as shown below: You will now see a list of default patch baselines that are used to patch each operating system supported by Patch Manager. The default patch baseline only patches major security issues. You are going to crate a new Amazon Linux 2 patch baseline that will patch more things and make this new patch baseline the default. Click Create patch baseline . In the Name field, enter a name to give the new baseline such as pww . In the Operating system field, select Amazon Linux 2 . In the Approval rules section, check the box under Include non-security updates . IMPORTANT NOTE: Depending on the size of the screen, the box may not align with the title Include non-security updates . See the figure below. Click the Create patch baseline button at the bottom of the screen. You should now see the new patch baseline in the list of baselines. You may need to refresh the browser window to see it. This new patch baseline includes non-security patches. Note at the end of the line representing the newly created patch baseine you will see No in the Default Baseline column as shown in the figure below. Click the radio button on the line with the newly created patch baseline. From the Actions menu at the top select Set default patch baseline . You will be asked to confirm this. You have just set the default patch baseline for Amazon Linux 2 to use the patch baseline you just created that includes non-security patches. You should now see Yes at the end of the patch baseline as shown below. Click Configure patching In the Configure patching screen, go to the Instances to patch section and click the Enter instance tags radio button. In the Instance tags field, enter aws:cloudformation:stack-name into the Tag key field. In the Tag value field, enter the stack name that you created earlier. Click Add . In the Patching schedule section, click the Skip scheduling and patch instances now radio button. In the Patching operation section, click the Scan and install radio button if it is not alerady selected. Your screen should look similar to the image below. Click the Configure patching button at the bottom of the window. You will see a message at the top of your screen saying that Patch Manager will use Run Command to patch the instances. Run Command is another feature of AWS Systems Manager that runs a command across multiple Amazon EC2 instances. Patch Manager build the commands necessary to perform the patching and is using Run Command to actually execute the commands.","title":"Use AWS Systems Manager Patch Manager"},{"location":"builder-session/remediate/#check-the-patching-status","text":"You are now going to examine the status of the patching operation by using AWS Systems Manager Run Command. Go to the AWS Systems Manager Console and click Run Command on the left menu. If the patching is still running, you will see the entry in the Commands tab. Wait for the command to finish. Refresh the screen if necessary to update the display. Once the command has finished, click on Command history . Look for the line containing the document name AWS-RunPatchBaseline . That represents the Patch Manager activity.Your screen should look similar to the image below. Click on the Command ID link to see more details about the command. You will see a line for each target with a link referencing the Instance ID. If you then click on the Instance ID , you will see each step of the command that is executed. Note that some steps are skipped because they do not apply to the operating system of the instance. Also, you only see the first part of the command output. If you want to see all of the output you can configure Systems Manager to direct the output into an Amazon S3 bucket. You have now completed the patching operation. In the Verify Phase, you will re-assess the environment with Amazon Inspector.","title":"Check the patching status"},{"location":"builder-session/remediate/#2-launch-second-inspector-assessment-run","text":"Go to the Amazon Inspector console, click Assessment templates on the menu. Locate the template that you created during the Assess Phase and check the box at the left end of that row. Click Run . This will launch another assessment run. Click Assessmnet runs and periodically refresh the screen. Wait until the status for the run changes to Analysis complete . The run will take approximately 15 minutes to complete. While you are waiting, continue with the steps below.","title":"2. Launch Second Inspector Assessment Run"},{"location":"builder-session/remediate/#perimeter-layer-waf-rule-creation-and-solutions-continued","text":"","title":"Perimeter Layer - WAF Rule Creation and Solutions (Continued)"},{"location":"builder-session/remediate/#1-cross-site-scripting-mitigation","text":"Use Cross-site scripting, as well as string matching conditions to build rules that mitigate cross site scripting attacks. Solution create Cross-site scripting condition named filterXSS with 4 filters query_string, url decode body, html decode body, url decode header, cookie, url decode create a String and regex matching String match type condition named filterXSSPathException with 1 filter. This demonstrates how to add an expception for the XSS rule. uri, starts with, no transform, /reportBuilder/Editor.aspx create a rule named matchXSS type regular does match XSS condition: filterXSS does not match string match condition: filterXSSPathException add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked Click here to proceed to the Verify Phase.","title":"1. Cross Site Scripting Mitigation"},{"location":"builder-session/verify/","text":"Supercharging your Workload Defenses - Verify Phase Host Layer - Verify Phase Now that you have remediate the environment, you will again use Amazon Inspector to assess the environment again to see how the patching affected the overall security posture of the environment. Go to the Amazon Inspector console, click Assessment templates on the menu. Locate the template that you created during the Assess Phase and confirm the run has completed. If needed, click Assessmnet runs and periodically refresh the screen. Wait until the status for the run changes to Analysis complete . The run will take approximately 15 minutes to complete. Compare the number of findings between the two runs. In most cases, there will be fewer findings in the newer run since patches have been applied. The change in the number findings may vary based on the age of the AMI used to launch the instances. Click the number of findings for the newest run (after the patches were installed). You will then see all of the findings that were not patched during the Remediate Phase. Take a look at the entries that were not patched. A common example of a finding is an instance is configured to allow users to log in with root credentials over SSH, without having to use a command authenticated by a public key. Why would Patch Manager not patch this or the other findings? You have now completed this round. Click here to proceed to the Cleanup Phase. Perimeter Layer - Verify Phase In the previous remediation phase, you implemented an AWS WAF ruleset to protect your site from common attack vectors. You are now going to reassess the posture of the site to confirm the rules are performing as intended and blocking the simulated malicious requests. Confirm malicious requests are blocked by WAF policy Implement WAF monitoring dashboard using Amazon CloudWatch (Optional) Confirm malicious requests are blocked by WAF policy If needed, start a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint Confirm that all of the tests in the script pass. If requests (other than canary) are not being blocked, go back to the remediate phase and confirm your conditions and rules are properly configured. Implement WAF monitoring dashboard using Amazon CloudWatch (Optional) If you finish early, use CloudWatch Dashboards to create a monitoring system for your protection layer . Here are some sample of metrics that you can use. Starting from top left side, in clockwise order, we have: Allowed vs Blocked Requests : if you receive a surge in allowed access (2 times normal peak access) or blocked access (any period that identifies more than 1,000 blocked requests), you can configure CloudWatch to send an alert. The idea here is to track known DDoS (when blocked requests increase) or new version of attack (when the requests are allowed to access the system); BytesDownloaded vs. Uploaded : help you identify when DDoS attack targets a service that doesn't need to receive a huge amount of access in order to exhaust resources (ex: search engine component sending MBs of information for one specific request parameters set); ELB Spillover and Queue length : use these metrics to verify if the attack is already causing damage to the infrastructure and/or for some reason, the attacker is bypassing protection layer and attacking directly unprotected resources; ELB Request Count : same as above, helps you identify damage by checking if the attacker is bypassing protection layer and/or CloudFront cache; review rules to increase cache hit rate; ELB Healthy Host : another system health check metric; ASG CPU Utilization : identify if the attacker is not only bypassing the CloudFront/WAF but also the ELB layer, also use to identify the damage impact of an attack; Learn more about Amazon Inspector Rules Packages Amazon Inspector offers a variety of rules packages that can be included in assessments. The applicable rules packages may vary by operating system. The Common Vulnerabilities and Exposures assessment is based on the CVE project that is hosted at cve.mitrei.org . Open a new tab in your browser to cve.mitre.orf . Click on Search CVE List . Enter CVE-2018-20169 into the search field and click Submit . This shows you how to research known vulnerabilities. The Security Best Practices rule package examines some common configuration settings for some of the most commobn Amazon Linux settings. You can read more about this rule package here . Click here to proceed to the Cleanup Phase.","title":"Verify Phase"},{"location":"builder-session/verify/#supercharging-your-workload-defenses-verify-phase","text":"","title":"Supercharging your Workload Defenses - Verify Phase"},{"location":"builder-session/verify/#host-layer-verify-phase","text":"Now that you have remediate the environment, you will again use Amazon Inspector to assess the environment again to see how the patching affected the overall security posture of the environment. Go to the Amazon Inspector console, click Assessment templates on the menu. Locate the template that you created during the Assess Phase and confirm the run has completed. If needed, click Assessmnet runs and periodically refresh the screen. Wait until the status for the run changes to Analysis complete . The run will take approximately 15 minutes to complete. Compare the number of findings between the two runs. In most cases, there will be fewer findings in the newer run since patches have been applied. The change in the number findings may vary based on the age of the AMI used to launch the instances. Click the number of findings for the newest run (after the patches were installed). You will then see all of the findings that were not patched during the Remediate Phase. Take a look at the entries that were not patched. A common example of a finding is an instance is configured to allow users to log in with root credentials over SSH, without having to use a command authenticated by a public key. Why would Patch Manager not patch this or the other findings? You have now completed this round. Click here to proceed to the Cleanup Phase.","title":"Host Layer - Verify Phase"},{"location":"builder-session/verify/#perimeter-layer-verify-phase","text":"In the previous remediation phase, you implemented an AWS WAF ruleset to protect your site from common attack vectors. You are now going to reassess the posture of the site to confirm the rules are performing as intended and blocking the simulated malicious requests. Confirm malicious requests are blocked by WAF policy Implement WAF monitoring dashboard using Amazon CloudWatch (Optional)","title":"Perimeter Layer - Verify Phase"},{"location":"builder-session/verify/#confirm-malicious-requests-are-blocked-by-waf-policy","text":"If needed, start a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint Confirm that all of the tests in the script pass. If requests (other than canary) are not being blocked, go back to the remediate phase and confirm your conditions and rules are properly configured.","title":"Confirm malicious requests are blocked by WAF policy"},{"location":"builder-session/verify/#implement-waf-monitoring-dashboard-using-amazon-cloudwatch-optional","text":"If you finish early, use CloudWatch Dashboards to create a monitoring system for your protection layer . Here are some sample of metrics that you can use. Starting from top left side, in clockwise order, we have: Allowed vs Blocked Requests : if you receive a surge in allowed access (2 times normal peak access) or blocked access (any period that identifies more than 1,000 blocked requests), you can configure CloudWatch to send an alert. The idea here is to track known DDoS (when blocked requests increase) or new version of attack (when the requests are allowed to access the system); BytesDownloaded vs. Uploaded : help you identify when DDoS attack targets a service that doesn't need to receive a huge amount of access in order to exhaust resources (ex: search engine component sending MBs of information for one specific request parameters set); ELB Spillover and Queue length : use these metrics to verify if the attack is already causing damage to the infrastructure and/or for some reason, the attacker is bypassing protection layer and attacking directly unprotected resources; ELB Request Count : same as above, helps you identify damage by checking if the attacker is bypassing protection layer and/or CloudFront cache; review rules to increase cache hit rate; ELB Healthy Host : another system health check metric; ASG CPU Utilization : identify if the attacker is not only bypassing the CloudFront/WAF but also the ELB layer, also use to identify the damage impact of an attack;","title":"Implement WAF monitoring dashboard using Amazon CloudWatch (Optional)"},{"location":"builder-session/verify/#learn-more-about-amazon-inspector-rules-packages","text":"Amazon Inspector offers a variety of rules packages that can be included in assessments. The applicable rules packages may vary by operating system. The Common Vulnerabilities and Exposures assessment is based on the CVE project that is hosted at cve.mitrei.org . Open a new tab in your browser to cve.mitre.orf . Click on Search CVE List . Enter CVE-2018-20169 into the search field and click Submit . This shows you how to research known vulnerabilities. The Security Best Practices rule package examines some common configuration settings for some of the most commobn Amazon Linux settings. You can read more about this rule package here . Click here to proceed to the Cleanup Phase.","title":"Learn more about Amazon Inspector Rules Packages"},{"location":"workshop/","text":"AWS Protecting Workloads Workshop Welcome to the AWS Protecting Workloads Workshop! In this workshop, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use AWS Web Application Firewall (WAF), Amazon Inspector and AWS Systems Manager to identify the vulnerabilities and remediate them. Scenario Welcome to Widgets LLC! You have just joined the team and your first task is to enhance security for the company website. The site runs on Linux, PHP and Apache and uses an EC2 an autoscaling group behind an Application Load Balancer (ALB). After an initial architecture assessment you have found multiple vulnerabilities and configuration issues. The dev team is swamped and will not be able to remediate code level issues for several weeks. Your mission in this workshop round is to build an effective set of controls that mitigate common attack vectors against web applications, and provide you with the monitoring capabilities needed to react to emerging threats when they occur. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User Before you Begin Please review the architecture diagram below and the getting started notes before proceeding. Workshop Architecture","title":"Scenario"},{"location":"workshop/#aws-protecting-workloads-workshop","text":"Welcome to the AWS Protecting Workloads Workshop! In this workshop, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use AWS Web Application Firewall (WAF), Amazon Inspector and AWS Systems Manager to identify the vulnerabilities and remediate them.","title":"AWS Protecting Workloads Workshop"},{"location":"workshop/#scenario","text":"Welcome to Widgets LLC! You have just joined the team and your first task is to enhance security for the company website. The site runs on Linux, PHP and Apache and uses an EC2 an autoscaling group behind an Application Load Balancer (ALB). After an initial architecture assessment you have found multiple vulnerabilities and configuration issues. The dev team is swamped and will not be able to remediate code level issues for several weeks. Your mission in this workshop round is to build an effective set of controls that mitigate common attack vectors against web applications, and provide you with the monitoring capabilities needed to react to emerging threats when they occur. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User Before you Begin Please review the architecture diagram below and the getting started notes before proceeding.","title":"Scenario"},{"location":"workshop/#workshop-architecture","text":"","title":"Workshop Architecture"},{"location":"workshop/cleanup/","text":"AWS Protecting Workloads Workshop - Cleanup Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"Cleanup"},{"location":"workshop/cleanup/#aws-protecting-workloads-workshop-cleanup","text":"Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"AWS Protecting Workloads Workshop - Cleanup"},{"location":"workshop/getting-started/","text":"Getting Started Create or Identify Exisitng AWS account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Note About Workshop and AWS Account We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . Workshop Rounds Mitigating Common Web Application Attack Vectors Using AWS Web Application Firewall Automating Assessment and Remediation Using Amazon Inspector and AWS Systems Manager You are now setup for the workshop!","title":"Getting Started"},{"location":"workshop/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"workshop/getting-started/#create-or-identify-exisitng-aws-account","text":"In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Note About Workshop and AWS Account We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account.","title":"Create or Identify Exisitng AWS account"},{"location":"workshop/getting-started/#create-an-admin-user","text":"If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created.","title":"Create an admin user"},{"location":"workshop/getting-started/#add-credits-optional","text":"If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem .","title":"Add credits (optional)"},{"location":"workshop/getting-started/#workshop-rounds","text":"Mitigating Common Web Application Attack Vectors Using AWS Web Application Firewall Automating Assessment and Remediation Using Amazon Inspector and AWS Systems Manager You are now setup for the workshop!","title":"Workshop Rounds"},{"location":"workshop/license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"workshop/license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"workshop/host-layer/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round In this round, you will start with environment built in the Perimeter Round which consists of Amazon Linux 2 web servers behind an application load balancer. You will then use Amazon Inspector and AWS Systems Manager to identify the host layer vulnerabilities and remediate them. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User Workshop Phases To begin the workshop, proceed to the Build phase below. Build Assess Remediate Verify CleanUp","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round"},{"location":"workshop/host-layer/#identifying-and-remediating-host-vulnerabilities-host-layer-round","text":"In this round, you will start with environment built in the Perimeter Round which consists of Amazon Linux 2 web servers behind an application load balancer. You will then use Amazon Inspector and AWS Systems Manager to identify the host layer vulnerabilities and remediate them. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round"},{"location":"workshop/host-layer/#workshop-phases","text":"To begin the workshop, proceed to the Build phase below. Build Assess Remediate Verify CleanUp","title":"Workshop Phases"},{"location":"workshop/host-layer/assess/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Assess Phase In the previous Build Phase, you deployed a CloudFormation stack that contains some Amazon EC2 instances behind an application load balancer. You are now going to use Amazon Inspector to assess the instances and identify findings that need to be remediated. Before you can assess the instances with Amazon Inspector, you need to identify the instances and install the Amazon Inspector agent on them. This is easier to do in small environments with only a few instances but can become more difficult in organizations with hundreds or even thousands of instances. For this reason, you are going to learn how to use tags to select the instances on which you will install the Amazon Inspector agent. Tags are labels that can be attached to AWS resources to make it easier to act on them collectively. In this section you will do the following tasks: Examine the CloudFormation stack you built to learn about the tags that were applied by AWS CloudFormation. Use AWS Systems Manager to install the Amazon Inspector agent on the instances and run the scan Learn about Amazon Inspector rules packages Examine Amazon Inspector findings Examine the stack that you built and its tags Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later. Click the check box to the left of the stack name and then click the Resources tab below. You will see a list of resources that were deployed by the stack as shown in the figure below. The Type column lists the type of the resouces. Notice that you will not see any resources of type AWS::EC2::Instance even though there are now EC2 instances running.. The reason for this is that the CloudFormation stack did not deploy any - at least not directly. The stack did, however, deploy an auto scaling group with a launch configuration that in turn launched the instances. You will now look at the auto scaling group and see how it supports tagging. Continue scrolling through the resources shown by CloudFormation and look for a resource named AutoScalingGroup as shown in the picture below. Click the hyperlink next to AutoScalingGroup. This will take you to the Amazon EC2 console and display the auto scaling group. Click on the Tags tab to see how the auto scaling group handles tags. Your console display should look similar to the picture below. The picture above shows that there are four tags that are propogated to every EC2 instance created by the auto scaling group. The tags include a Name tag and three additional tags that are generated by CloudFormation. This tells us that every EC2instance that is launched by the auto scaling group will have a Name tag with the value of pww-node . In a production environment, you may have a large number of resources that spin up and spin down because of the elastiicity that AWS offers. If you understand how tags are applied you can more easily manage the environment regardless of how many instances exist at any point in time. You will now learn how to look up the Amazon EC2 instances using tags. Go to the Amazon EC2 console and look for instances having a name that begins with the stack name followed by -node , pww-node in this example. If you cannot see them, type the instance name ( pww-node in this case) into the search box. Select one of them by checking the box to the left of the instance and then click on the Tags tab. You should see a table like that in the figure below. Notice that the instance has tags reflecting the CloudFormation stack name and stack id. These tags are added because of settings in the auto scaling group which propogate tags to newly created instances. You have now learned about the tags that you can use to look up AWS resources. You will take advantage of this feature when you set up Amazon Inspector later in this phase. Install the Inspector Agent on the Amazon EC2 instances Now that you know how to identify the instances in the environment, you need to install the Amazon Inspector agent on them. AWS Systems Manager provides a way for you to run commands across your Amazon EC2 instances. The commands are defined in documents . AWS provides a document that you will use to install the Amazon Inspector agent. You will use tags to identify the instances on which to apply the document. Go to the AWS Systems Manager console. Under the Actions menu on the left, click Run Command . You will be taken to the AWS Systems Manager Run Command home screen. Click the Run a Command button and the Run a Command screen will appear. In the Command document window, page through the available documents until you find the document named AmazonInspector-ManageAWSAgent . Click the radio button to the left of that document as shown in the figure below. Scroll further down until you can see the Targets window. Click the Specifying a tag radio button. For the tag key, enter aws:cloudformation:stack-name . For the value enter the name of the CloudFormation stack you created ( pww in this example) and click Add . Your screen should be similar to the figure below. Scroll down to the Output options window. Clear the box next to Enable writing to an S3 bucket as shown in the figure below. Scroll to the bottom of the screen and click the Run button. You will then be be taken to the command status window while the installation of the Amazon Inspector is running. You can periodically update the command status by clicking on the refresh button within the window. After the commands finish running, the Overall status should be Success as shown in the figure below. The number of instances may vary based on the version of the template. You have now installed the Amazon Inspector agent on the instances in the environment. Use Amazon Inspector to scan the instances Configure the Amazon Inspector target Go to the Amazon Inspector console and click Get Started if prompted. If you see a \"Welcome to Amazon Inspector\" wizard appear, click Cancel . You will set up Amazon Inspector manually so you can become more familiar with the service. Click Assessment Targets on the left menu and then click the Create button. Scroll down to the Assessment Target window. In the Name field, enter a name for the target. For example, given that the stack name in this example is pww , you can enter pww targets or another name of your choosing. In the Use Tags section, select aws:cloudformation:stack-name for the key from the drop down list and select the name of the stack ( pww in this example) from the drop down value list. Uncheck the Install Agents check box since we have already installed the agent. Your screen should look similar to the figure below. Click the Save button to save the target definition. Inspector may prompt you for permission to create a service linked role to give the Amazon Inspector service permission to retrieve information about your instances. If you see a prompt like the one in the figure below, click Ok to create the role. You have now created an Amazon Inspector target that identifies the instances that would be assessed. The target selects instances based on tag values. In this case, the tag you are using is aws:cloudformation:stack-name which is set to the name of the CloudFormation stack. In particular, the tag is added to the auto scaling launch configuration which is configured to propogate the tag to the Amazon EC2 instances that it launches. Because of this, Amazon Inspector will automatically scan new instances that may appear over the lifetime of the environment. This is an example of how the elasticity of the AWS cloud when combined with tagging can enable you to support dynamic environments. Configure the Amazon Inspector template and run the assessment Now that you have created an Amazon Inspector target, you will now create an Amazon Inspector tepmlate. You use templates to define the Amazon Inspector targets and rule packages that comprise an assessment run. Go to the Amazon Inspector console, click Assessment templates on the menu, and then click Create . In the Name field, enter a name for the template. In the Target name field, select the target you previously created from the list of options. In the Rules packages field, select Common Vulnerabilities and Exposures and Security Best Practices . In the Duration field, select 15 minutes . Do not accept the default value! In the Assessment Schedule, uncheck (turn off) the Set up recurring assessment runs so that the assessment template will only run a one-time assessment. Scroll to the bottom and click the Create and run button to save the template and run the assessment. Depending on the size of your screen, you may have to scroll down multiple windows. If you cannot click Create and run , make sure you unchecked the box in the previous step and try again. The assessment will start and will take 15 minutes to compete. On the Amazon Inspector menu, click Assessment runs . You should see an entry for the assesment you just started. While the assessment is running, the status will be Collecting data . Periodically refresh the screen to see the current status. When the assessment run ends, the status will change to Analysis complete. The assessment will run for approximately 15 minutes. While you are waiting, continue with the steps below. Learn more about Amazon Inspector Rules Packages Amazon Inspector offers a variety of rules packages that can be included in assessments. The applicable rules packages may vary by operating system. The Common Vulnerabilities and Exposures assessment is based on the CVE project that is hosted at cve.mitrei.org . Open a new tab in your browser to cve.mitre.orf . Click on Search CVE List . Enter CVE-2018-20169 into the search field and click Submit . This shows you how to research known vulnerabilities. The Security Best Practices rule package examines some common configuration settings for some of the most commobn Amazon Linux settings. You can read more about this rule package here . Examine the findings After the assessment run has completed, go to the Amazon Inspector console and click Assessment runs . The window should be similar to what appears below. On the line that represents your most recent run, make note of the number in the Findings column (22 in this diagram). After you perform the remediation later in this workshop, that number should decrease. Click on the number in the Findings column. The findings associated with the run will appear as shown below. You will see findings for each of the rules packages that you used in the assessment. The number of findings often varies by the age of the AMI (Amazon Machine Image) because older AMIs typically have more vulnerabilities than newer AMIs. Choose one of the findings associated with the Common Vulnerabilities and Exposures rule package. An example appears below. Note that there is a link in the recommendation on which you can click to see the CVE entry. Now that you have run the assessment and seen the findings you are ready to perform some remediation. Click here to proceed to the Remediate Phase.","title":"Assess Phase"},{"location":"workshop/host-layer/assess/#identifying-and-remediating-host-vulnerabilities-host-layer-round-assess-phase","text":"In the previous Build Phase, you deployed a CloudFormation stack that contains some Amazon EC2 instances behind an application load balancer. You are now going to use Amazon Inspector to assess the instances and identify findings that need to be remediated. Before you can assess the instances with Amazon Inspector, you need to identify the instances and install the Amazon Inspector agent on them. This is easier to do in small environments with only a few instances but can become more difficult in organizations with hundreds or even thousands of instances. For this reason, you are going to learn how to use tags to select the instances on which you will install the Amazon Inspector agent. Tags are labels that can be attached to AWS resources to make it easier to act on them collectively. In this section you will do the following tasks: Examine the CloudFormation stack you built to learn about the tags that were applied by AWS CloudFormation. Use AWS Systems Manager to install the Amazon Inspector agent on the instances and run the scan Learn about Amazon Inspector rules packages Examine Amazon Inspector findings","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Assess Phase"},{"location":"workshop/host-layer/assess/#examine-the-stack-that-you-built-and-its-tags","text":"Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later. Click the check box to the left of the stack name and then click the Resources tab below. You will see a list of resources that were deployed by the stack as shown in the figure below. The Type column lists the type of the resouces. Notice that you will not see any resources of type AWS::EC2::Instance even though there are now EC2 instances running.. The reason for this is that the CloudFormation stack did not deploy any - at least not directly. The stack did, however, deploy an auto scaling group with a launch configuration that in turn launched the instances. You will now look at the auto scaling group and see how it supports tagging. Continue scrolling through the resources shown by CloudFormation and look for a resource named AutoScalingGroup as shown in the picture below. Click the hyperlink next to AutoScalingGroup. This will take you to the Amazon EC2 console and display the auto scaling group. Click on the Tags tab to see how the auto scaling group handles tags. Your console display should look similar to the picture below. The picture above shows that there are four tags that are propogated to every EC2 instance created by the auto scaling group. The tags include a Name tag and three additional tags that are generated by CloudFormation. This tells us that every EC2instance that is launched by the auto scaling group will have a Name tag with the value of pww-node . In a production environment, you may have a large number of resources that spin up and spin down because of the elastiicity that AWS offers. If you understand how tags are applied you can more easily manage the environment regardless of how many instances exist at any point in time. You will now learn how to look up the Amazon EC2 instances using tags. Go to the Amazon EC2 console and look for instances having a name that begins with the stack name followed by -node , pww-node in this example. If you cannot see them, type the instance name ( pww-node in this case) into the search box. Select one of them by checking the box to the left of the instance and then click on the Tags tab. You should see a table like that in the figure below. Notice that the instance has tags reflecting the CloudFormation stack name and stack id. These tags are added because of settings in the auto scaling group which propogate tags to newly created instances. You have now learned about the tags that you can use to look up AWS resources. You will take advantage of this feature when you set up Amazon Inspector later in this phase.","title":"Examine the stack that you built and its tags"},{"location":"workshop/host-layer/assess/#install-the-inspector-agent-on-the-amazon-ec2-instances","text":"Now that you know how to identify the instances in the environment, you need to install the Amazon Inspector agent on them. AWS Systems Manager provides a way for you to run commands across your Amazon EC2 instances. The commands are defined in documents . AWS provides a document that you will use to install the Amazon Inspector agent. You will use tags to identify the instances on which to apply the document. Go to the AWS Systems Manager console. Under the Actions menu on the left, click Run Command . You will be taken to the AWS Systems Manager Run Command home screen. Click the Run a Command button and the Run a Command screen will appear. In the Command document window, page through the available documents until you find the document named AmazonInspector-ManageAWSAgent . Click the radio button to the left of that document as shown in the figure below. Scroll further down until you can see the Targets window. Click the Specifying a tag radio button. For the tag key, enter aws:cloudformation:stack-name . For the value enter the name of the CloudFormation stack you created ( pww in this example) and click Add . Your screen should be similar to the figure below. Scroll down to the Output options window. Clear the box next to Enable writing to an S3 bucket as shown in the figure below. Scroll to the bottom of the screen and click the Run button. You will then be be taken to the command status window while the installation of the Amazon Inspector is running. You can periodically update the command status by clicking on the refresh button within the window. After the commands finish running, the Overall status should be Success as shown in the figure below. The number of instances may vary based on the version of the template. You have now installed the Amazon Inspector agent on the instances in the environment.","title":"Install the Inspector Agent on the Amazon EC2 instances"},{"location":"workshop/host-layer/assess/#use-amazon-inspector-to-scan-the-instances","text":"","title":"Use Amazon Inspector to scan the instances"},{"location":"workshop/host-layer/assess/#configure-the-amazon-inspector-target","text":"Go to the Amazon Inspector console and click Get Started if prompted. If you see a \"Welcome to Amazon Inspector\" wizard appear, click Cancel . You will set up Amazon Inspector manually so you can become more familiar with the service. Click Assessment Targets on the left menu and then click the Create button. Scroll down to the Assessment Target window. In the Name field, enter a name for the target. For example, given that the stack name in this example is pww , you can enter pww targets or another name of your choosing. In the Use Tags section, select aws:cloudformation:stack-name for the key from the drop down list and select the name of the stack ( pww in this example) from the drop down value list. Uncheck the Install Agents check box since we have already installed the agent. Your screen should look similar to the figure below. Click the Save button to save the target definition. Inspector may prompt you for permission to create a service linked role to give the Amazon Inspector service permission to retrieve information about your instances. If you see a prompt like the one in the figure below, click Ok to create the role. You have now created an Amazon Inspector target that identifies the instances that would be assessed. The target selects instances based on tag values. In this case, the tag you are using is aws:cloudformation:stack-name which is set to the name of the CloudFormation stack. In particular, the tag is added to the auto scaling launch configuration which is configured to propogate the tag to the Amazon EC2 instances that it launches. Because of this, Amazon Inspector will automatically scan new instances that may appear over the lifetime of the environment. This is an example of how the elasticity of the AWS cloud when combined with tagging can enable you to support dynamic environments.","title":"Configure the Amazon Inspector target"},{"location":"workshop/host-layer/assess/#configure-the-amazon-inspector-template-and-run-the-assessment","text":"Now that you have created an Amazon Inspector target, you will now create an Amazon Inspector tepmlate. You use templates to define the Amazon Inspector targets and rule packages that comprise an assessment run. Go to the Amazon Inspector console, click Assessment templates on the menu, and then click Create . In the Name field, enter a name for the template. In the Target name field, select the target you previously created from the list of options. In the Rules packages field, select Common Vulnerabilities and Exposures and Security Best Practices . In the Duration field, select 15 minutes . Do not accept the default value! In the Assessment Schedule, uncheck (turn off) the Set up recurring assessment runs so that the assessment template will only run a one-time assessment. Scroll to the bottom and click the Create and run button to save the template and run the assessment. Depending on the size of your screen, you may have to scroll down multiple windows. If you cannot click Create and run , make sure you unchecked the box in the previous step and try again. The assessment will start and will take 15 minutes to compete. On the Amazon Inspector menu, click Assessment runs . You should see an entry for the assesment you just started. While the assessment is running, the status will be Collecting data . Periodically refresh the screen to see the current status. When the assessment run ends, the status will change to Analysis complete. The assessment will run for approximately 15 minutes. While you are waiting, continue with the steps below.","title":"Configure the Amazon Inspector template and run the assessment"},{"location":"workshop/host-layer/assess/#learn-more-about-amazon-inspector-rules-packages","text":"Amazon Inspector offers a variety of rules packages that can be included in assessments. The applicable rules packages may vary by operating system. The Common Vulnerabilities and Exposures assessment is based on the CVE project that is hosted at cve.mitrei.org . Open a new tab in your browser to cve.mitre.orf . Click on Search CVE List . Enter CVE-2018-20169 into the search field and click Submit . This shows you how to research known vulnerabilities. The Security Best Practices rule package examines some common configuration settings for some of the most commobn Amazon Linux settings. You can read more about this rule package here .","title":"Learn more about Amazon Inspector Rules Packages"},{"location":"workshop/host-layer/assess/#examine-the-findings","text":"After the assessment run has completed, go to the Amazon Inspector console and click Assessment runs . The window should be similar to what appears below. On the line that represents your most recent run, make note of the number in the Findings column (22 in this diagram). After you perform the remediation later in this workshop, that number should decrease. Click on the number in the Findings column. The findings associated with the run will appear as shown below. You will see findings for each of the rules packages that you used in the assessment. The number of findings often varies by the age of the AMI (Amazon Machine Image) because older AMIs typically have more vulnerabilities than newer AMIs. Choose one of the findings associated with the Common Vulnerabilities and Exposures rule package. An example appears below. Note that there is a link in the recommendation on which you can click to see the CVE entry. Now that you have run the assessment and seen the findings you are ready to perform some remediation. Click here to proceed to the Remediate Phase.","title":"Examine the findings"},{"location":"workshop/host-layer/build/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Build Phase Environment setup For those who have completed the Web Application Firewall round If you have completed the Web Application Firewall round, this round uses the same environment. If you have not deleted the AWS CloudFormation stack from the Web Application Firewall round, you can click here to proceed to the Assess Phase. Note About Workshop and AWS Account We strongly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. US West 2 (Oregon) US East 2 (Ohio) US East 1 (N. Virginia) EU West 1 (Ireland) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Automated Scanner: Set to false. Scanner Username: Leave default. Scanner Password: Leave default. Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Click Next . Click Next on the Configure stack options section. Check the box to acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take approximately eight minutes. Click here to proceed to the Assess Phase.","title":"Build Phase"},{"location":"workshop/host-layer/build/#identifying-and-remediating-host-vulnerabilities-host-layer-round-build-phase","text":"","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Build Phase"},{"location":"workshop/host-layer/build/#environment-setup","text":"For those who have completed the Web Application Firewall round If you have completed the Web Application Firewall round, this round uses the same environment. If you have not deleted the AWS CloudFormation stack from the Web Application Firewall round, you can click here to proceed to the Assess Phase. Note About Workshop and AWS Account We strongly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. US West 2 (Oregon) US East 2 (Ohio) US East 1 (N. Virginia) EU West 1 (Ireland) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Automated Scanner: Set to false. Scanner Username: Leave default. Scanner Password: Leave default. Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Click Next . Click Next on the Configure stack options section. Check the box to acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take approximately eight minutes. Click here to proceed to the Assess Phase.","title":"Environment setup"},{"location":"workshop/host-layer/cleanup/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Cleanup Phase Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the CloudFormation console and delete the stack that you created.","title":"Cleanup Phase"},{"location":"workshop/host-layer/cleanup/#identifying-and-remediating-host-vulnerabilities-host-layer-round-cleanup-phase","text":"Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the CloudFormation console and delete the stack that you created.","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Cleanup Phase"},{"location":"workshop/host-layer/contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing Guidelines"},{"location":"workshop/host-layer/contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"workshop/host-layer/contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"workshop/host-layer/contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"workshop/host-layer/contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"workshop/host-layer/contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"workshop/host-layer/contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"workshop/host-layer/contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"workshop/host-layer/getting-started/","text":"Getting Started Create an AWS account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . Create a Cloud9 instance (optional) If the workshop you are doing requires you to run commands or scripts you will need to launch a an AWS Cloud9 instance which will provide you with a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. The workshop instructions will specify if this needed. Below are the instructions for launching an instance: Browse to the AWS Cloud9 console. Click Create environment on the right side. Enter a Name (security-workshop-ide) and click Next step . Leave all the defaults and click Next step . Click Create environment . The environment will open automatically after it has been provisioned. Browse back to the AWS Cloud9 console and you can click Open IDE on the environment you created to access it at anytime. You are now setup for the workshops!","title":"Getting Started"},{"location":"workshop/host-layer/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"workshop/host-layer/getting-started/#create-an-aws-account","text":"In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for.","title":"Create an AWS account"},{"location":"workshop/host-layer/getting-started/#create-an-admin-user","text":"If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created.","title":"Create an admin user"},{"location":"workshop/host-layer/getting-started/#add-credits-optional","text":"If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem .","title":"Add credits (optional)"},{"location":"workshop/host-layer/getting-started/#create-a-cloud9-instance-optional","text":"If the workshop you are doing requires you to run commands or scripts you will need to launch a an AWS Cloud9 instance which will provide you with a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. The workshop instructions will specify if this needed. Below are the instructions for launching an instance: Browse to the AWS Cloud9 console. Click Create environment on the right side. Enter a Name (security-workshop-ide) and click Next step . Leave all the defaults and click Next step . Click Create environment . The environment will open automatically after it has been provisioned. Browse back to the AWS Cloud9 console and you can click Open IDE on the environment you created to access it at anytime. You are now setup for the workshops!","title":"Create a Cloud9 instance (optional)"},{"location":"workshop/host-layer/license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"workshop/host-layer/license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"workshop/host-layer/remediate/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Remediate Phase In the previous Assess Phase, you installed Amazon Inspector on the instances that were launched as a result of the CloudFormation stack. You will now use AWS Systems Manager Patch Manager to apply patches. You will use tags to select the instances as well. In this section you will do the following tasks: Use AWS Systems Manager Patch Manager to set up patching Use AWS Systems Manager Run Command to check the status of the patching Use AWS Systems Manager Patch Manager Go to the Systems Manager console and select Patch Manager. If you see the Patch Manager home screen, then click the default patch baselines link as shown below: You will now see a list of default patch baselines that are used to patch each operating system supported by Patch Manager. The default patch baseline only patches major security issues. You are going to crate a new Amazon Linux 2 patch baseline that will patch more things and make this new patch baseline the default. Click Create patch baseline . In the Name field, enter a name to give the new baseline such as pww . In the Operating system field, select Amazon Linux 2 . In the Approval rules section, check the box under Include non-security updates . IMPORTANT NOTE: Depending on the size of the screen, the box may not align with the title Include non-security updates . See the figure below. Click the Create patch baseline button at the bottom of the screen. You should now see the new patch baseline in the list of baselines. You may need to refresh the browser window to see it. This new patch baseline includes non-security patches. Note at the end of the line representing the newly created patch baseine you will see No in the Default Baseline column as shown in the figure below. Click the radio button on the line with the newly created patch baseline. From the Actions menu at the top select Set default patch baseline . You will be asked to confirm this. You have just set the default patch baseline for Amazon Linux 2 to use the patch baseline you just created that includes non-security patches. You should now see Yes at the end of the patch baseline as shown below. Click Configure patching In the Configure patching screen, go to the Instances to patch section and click the Enter instance tags radio button. In the Instance tags field, enter aws:cloudformation:stack-name into the Tag key field. In the Tag value field, enter the stack name that you created earlier. Click Add . In the Patching schedule section, click the Skip scheduling and patch instances now radio button. In the Patching operation section, click the Scan and install radio button if it is not alerady selected. Your screen should look similar to the image below. Click the Configure patching button at the bottom of the window. You will see a message at the top of your screen saying that Patch Manager will use Run Command to patch the instances. Run Command is another feature of AWS Systems Manager that runs a command across multiple Amazon EC2 instances. Patch Manager build the commands necessary to perform the patching and is using Run Command to actually execute the commands. Check the patching status You are now going to examine the status of the patching operation by using AWS Systems Manager Run Command. Go to the AWS Systems Manager Console and click Run Command on the left menu. If the patching is still running, you will see the entry in the Commands tab. Wait for the command to finish. Refresh the screen if necessary to update the display. Once the command has finished, click on Command history . Look for the line containing the document name AWS-RunPatchBaseline . That represents the Patch Manager activity.Your screen should look similar to the image below. Click on the Command ID link to see more details about the command. You will see a line for each target with a link referencing the Instance ID. If you then click on the Instance ID , you will see each step of the command that is executed. Note that some steps are skipped because they do not apply to the operating system of the instance. Also, you only see the first part of the command output. If you want to see all of the output you can configure Systems Manager to direct the output into an Amazon S3 bucket. You have now completed the patching operation. In the Verify Phase, you will re-assess the environment with Amazon Inspector. Click here to proceed to the Verify Phase.","title":"Remediate Phase"},{"location":"workshop/host-layer/remediate/#identifying-and-remediating-host-vulnerabilities-host-layer-round-remediate-phase","text":"In the previous Assess Phase, you installed Amazon Inspector on the instances that were launched as a result of the CloudFormation stack. You will now use AWS Systems Manager Patch Manager to apply patches. You will use tags to select the instances as well. In this section you will do the following tasks: Use AWS Systems Manager Patch Manager to set up patching Use AWS Systems Manager Run Command to check the status of the patching","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Remediate Phase"},{"location":"workshop/host-layer/remediate/#use-aws-systems-manager-patch-manager","text":"Go to the Systems Manager console and select Patch Manager. If you see the Patch Manager home screen, then click the default patch baselines link as shown below: You will now see a list of default patch baselines that are used to patch each operating system supported by Patch Manager. The default patch baseline only patches major security issues. You are going to crate a new Amazon Linux 2 patch baseline that will patch more things and make this new patch baseline the default. Click Create patch baseline . In the Name field, enter a name to give the new baseline such as pww . In the Operating system field, select Amazon Linux 2 . In the Approval rules section, check the box under Include non-security updates . IMPORTANT NOTE: Depending on the size of the screen, the box may not align with the title Include non-security updates . See the figure below. Click the Create patch baseline button at the bottom of the screen. You should now see the new patch baseline in the list of baselines. You may need to refresh the browser window to see it. This new patch baseline includes non-security patches. Note at the end of the line representing the newly created patch baseine you will see No in the Default Baseline column as shown in the figure below. Click the radio button on the line with the newly created patch baseline. From the Actions menu at the top select Set default patch baseline . You will be asked to confirm this. You have just set the default patch baseline for Amazon Linux 2 to use the patch baseline you just created that includes non-security patches. You should now see Yes at the end of the patch baseline as shown below. Click Configure patching In the Configure patching screen, go to the Instances to patch section and click the Enter instance tags radio button. In the Instance tags field, enter aws:cloudformation:stack-name into the Tag key field. In the Tag value field, enter the stack name that you created earlier. Click Add . In the Patching schedule section, click the Skip scheduling and patch instances now radio button. In the Patching operation section, click the Scan and install radio button if it is not alerady selected. Your screen should look similar to the image below. Click the Configure patching button at the bottom of the window. You will see a message at the top of your screen saying that Patch Manager will use Run Command to patch the instances. Run Command is another feature of AWS Systems Manager that runs a command across multiple Amazon EC2 instances. Patch Manager build the commands necessary to perform the patching and is using Run Command to actually execute the commands.","title":"Use AWS Systems Manager Patch Manager"},{"location":"workshop/host-layer/remediate/#check-the-patching-status","text":"You are now going to examine the status of the patching operation by using AWS Systems Manager Run Command. Go to the AWS Systems Manager Console and click Run Command on the left menu. If the patching is still running, you will see the entry in the Commands tab. Wait for the command to finish. Refresh the screen if necessary to update the display. Once the command has finished, click on Command history . Look for the line containing the document name AWS-RunPatchBaseline . That represents the Patch Manager activity.Your screen should look similar to the image below. Click on the Command ID link to see more details about the command. You will see a line for each target with a link referencing the Instance ID. If you then click on the Instance ID , you will see each step of the command that is executed. Note that some steps are skipped because they do not apply to the operating system of the instance. Also, you only see the first part of the command output. If you want to see all of the output you can configure Systems Manager to direct the output into an Amazon S3 bucket. You have now completed the patching operation. In the Verify Phase, you will re-assess the environment with Amazon Inspector. Click here to proceed to the Verify Phase.","title":"Check the patching status"},{"location":"workshop/host-layer/verify/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Verify Phase Now that you have remediate the environment, you will again use Amazon Inspector to assess the environment again to see how the patching affected the overall security posture of the environment. Go to the Amazon Inspector console, click Assessment templates on the menu. Locate the template that you created during the Assess Phase and check the box at the left end of that row. Click Run . This will launch another assessment run. Click Assessmnet runs and periodically refresh the screen. Wait until the status for the run changes to Analysis complete . The run will take approximately 15 minutes to complete. Compare the number of findings between the two runs. In most cases, there will be fewer findings in the newer run since patches have been applied. The change in the number findings may vary based on the age of the AMI used to launch the instances. Click the number of findings for the newest run (after the patches were installed). You will then see all of the findings that were not patched during the Remediate Phase. Take a look at the entries that were not patchesd. A common example of a finding is an instance is configured to allow users to log in with root credentials over SSH, without having to use a command authenticated by a public key. Why would Patch Manager not patch this or the other findings? You have now completed this round. Click here to proceed to the Cleanup Phase.","title":"Verify Phase"},{"location":"workshop/host-layer/verify/#identifying-and-remediating-host-vulnerabilities-host-layer-round-verify-phase","text":"Now that you have remediate the environment, you will again use Amazon Inspector to assess the environment again to see how the patching affected the overall security posture of the environment. Go to the Amazon Inspector console, click Assessment templates on the menu. Locate the template that you created during the Assess Phase and check the box at the left end of that row. Click Run . This will launch another assessment run. Click Assessmnet runs and periodically refresh the screen. Wait until the status for the run changes to Analysis complete . The run will take approximately 15 minutes to complete. Compare the number of findings between the two runs. In most cases, there will be fewer findings in the newer run since patches have been applied. The change in the number findings may vary based on the age of the AMI used to launch the instances. Click the number of findings for the newest run (after the patches were installed). You will then see all of the findings that were not patched during the Remediate Phase. Take a look at the entries that were not patchesd. A common example of a finding is an instance is configured to allow users to log in with root credentials over SSH, without having to use a command authenticated by a public key. Why would Patch Manager not patch this or the other findings? You have now completed this round. Click here to proceed to the Cleanup Phase.","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Verify Phase"},{"location":"workshop/perimeter-layer/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF For your initial task, you will configure AWS WAF to protect your site from common attacks such as SQL injection and cross site scripting. AWS WAF is a web application firewall that helps protect your web applications from common web exploits that could affect application availability, compromise security or consume excessive resources. Phases in the Perimeter Layer round To begin the module, proceed to the Build phase below. Build Assess Remediate Verify","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF"},{"location":"workshop/perimeter-layer/#mitigating-common-web-application-attack-vectors-using-aws-waf","text":"For your initial task, you will configure AWS WAF to protect your site from common attacks such as SQL injection and cross site scripting. AWS WAF is a web application firewall that helps protect your web applications from common web exploits that could affect application availability, compromise security or consume excessive resources.","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF"},{"location":"workshop/perimeter-layer/#phases-in-the-perimeter-layer-round","text":"To begin the module, proceed to the Build phase below. Build Assess Remediate Verify","title":"Phases in the Perimeter Layer round"},{"location":"workshop/perimeter-layer/assess/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Assess Phase In the previous Build Phase, you built a CloudFormation stack that contains a PHP website on Amazon EC2 instances behind an application load balancer. You are now going to assess the posture of the site and then add an AWS WAF Web ACL to your site. In this section you will do the following tasks: Identify the stack you built Look up the output values for your environment and test access Use your Red Team Host to test for website vulnerabilities Identify the stack that you built Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later. Look up the Stack Outputs Go to the stack outputs and look for the website URL stored in the albEndpoint output value. Test access to the site by right clicking and opening in a new tab. Note the URL for your site as this will be used throughout this workshoop round. While in the stack outputs, note the ScannerUID value. This Id value will be used to identify the posture of your site within the automated scanner and the associated dashboard. While still in stack outputs, right click the link in RedTeamHostSession and open in new tab. This will launch an AWS Systems Manager Session Manager to the host you will use to perform add hock scans against your site URL. AWS Systems Manager Session Manager Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon EC2 instances through an interactive one-click browser-based shell or through the AWS CLI. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys. Website Scanning Environment and Tools In order to test your AWS WAF ruleset, this lab has been configured with two scanning capabilities; a Red Team Host where you can invoke manual scanning and an automated scanner which runs from outside your lab environment. The scanner performs 10 basic tests designed to help simulate and mitigate common web attack vectors. Canary GET - Should not be blocked Canary POST - Should not be blocked SQL Injection (SQLi) in Query String SQL Injection (SQLi) in Cookie Cross Site Scripting (XSS) in Query String Cross Site Scripting (XSS) in Body Inclusion in Modules Cross Site Request Forgery (CSRF) Token Missing Cross Site Request Forgery (CSRF) Token Invalid Path Traversal Note about Tests These basic tests are designed to provide common examples you can use to test AWS WAF functionality. You should perform thorough analysis and testing when implementing rules into your production environments. Website Scanning Environment and Tools - Manual Scanning Once you have started a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint The scanner.py script will run each of the tests above and report back the following information: Request : The HTTP request command used. Test Name : The name of the test from list above. Result : The HTTP status code returned. The logic in the scanner script color codes the response as follows: Green : 403 - Forbidden ( Except for canary GET and POST tests. ) Red : 200 - OK Blue : 404 - Not Found Yellow : 500 - Internal Server Error As you can see by running the script there are several vulnerabilities that need to be addressed. In the remnediate phase you will configure an AWS WAF Web ACL to block these requests. When AWS WAF blocks a web request based on the conditions that you specify, it returns HTTP status code 403 (Forbidden). For a full view of the request and response information, you can paste the Request command directly into the console and add the --debug argument. Note about Testing Tool The scanner.py script uses an open source HTTP client called httpie . HTTPie\u2014aitch-tee-tee-pie\u2014is a command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more. Website Scanning Environment and Tools - Automated Scanning For an AWS sponsored event, in addition to the ad hock scanning, automated scanning is also performed against your lab website. The automated tests are similar to the manual tests but the results are posted to a centralized scanning results dashboard along with the other workshop particpants. You can identify the scanning results for your site using the Unique Id found in the CloudFormation outputs. You can now proceed to the Remediate Phase .","title":"Assess Phase"},{"location":"workshop/perimeter-layer/assess/#mitigating-common-web-application-attack-vectors-using-aws-waf-assess-phase","text":"In the previous Build Phase, you built a CloudFormation stack that contains a PHP website on Amazon EC2 instances behind an application load balancer. You are now going to assess the posture of the site and then add an AWS WAF Web ACL to your site. In this section you will do the following tasks: Identify the stack you built Look up the output values for your environment and test access Use your Red Team Host to test for website vulnerabilities","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Assess Phase"},{"location":"workshop/perimeter-layer/assess/#identify-the-stack-that-you-built","text":"Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later.","title":"Identify the stack that you built"},{"location":"workshop/perimeter-layer/assess/#look-up-the-stack-outputs","text":"Go to the stack outputs and look for the website URL stored in the albEndpoint output value. Test access to the site by right clicking and opening in a new tab. Note the URL for your site as this will be used throughout this workshoop round. While in the stack outputs, note the ScannerUID value. This Id value will be used to identify the posture of your site within the automated scanner and the associated dashboard. While still in stack outputs, right click the link in RedTeamHostSession and open in new tab. This will launch an AWS Systems Manager Session Manager to the host you will use to perform add hock scans against your site URL. AWS Systems Manager Session Manager Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon EC2 instances through an interactive one-click browser-based shell or through the AWS CLI. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys.","title":"Look up the Stack Outputs"},{"location":"workshop/perimeter-layer/assess/#website-scanning-environment-and-tools","text":"In order to test your AWS WAF ruleset, this lab has been configured with two scanning capabilities; a Red Team Host where you can invoke manual scanning and an automated scanner which runs from outside your lab environment. The scanner performs 10 basic tests designed to help simulate and mitigate common web attack vectors. Canary GET - Should not be blocked Canary POST - Should not be blocked SQL Injection (SQLi) in Query String SQL Injection (SQLi) in Cookie Cross Site Scripting (XSS) in Query String Cross Site Scripting (XSS) in Body Inclusion in Modules Cross Site Request Forgery (CSRF) Token Missing Cross Site Request Forgery (CSRF) Token Invalid Path Traversal Note about Tests These basic tests are designed to provide common examples you can use to test AWS WAF functionality. You should perform thorough analysis and testing when implementing rules into your production environments.","title":"Website Scanning Environment and Tools"},{"location":"workshop/perimeter-layer/assess/#website-scanning-environment-and-tools-manual-scanning","text":"Once you have started a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint The scanner.py script will run each of the tests above and report back the following information: Request : The HTTP request command used. Test Name : The name of the test from list above. Result : The HTTP status code returned. The logic in the scanner script color codes the response as follows: Green : 403 - Forbidden ( Except for canary GET and POST tests. ) Red : 200 - OK Blue : 404 - Not Found Yellow : 500 - Internal Server Error As you can see by running the script there are several vulnerabilities that need to be addressed. In the remnediate phase you will configure an AWS WAF Web ACL to block these requests. When AWS WAF blocks a web request based on the conditions that you specify, it returns HTTP status code 403 (Forbidden). For a full view of the request and response information, you can paste the Request command directly into the console and add the --debug argument. Note about Testing Tool The scanner.py script uses an open source HTTP client called httpie . HTTPie\u2014aitch-tee-tee-pie\u2014is a command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more.","title":"Website Scanning Environment and Tools - Manual Scanning"},{"location":"workshop/perimeter-layer/assess/#website-scanning-environment-and-tools-automated-scanning","text":"For an AWS sponsored event, in addition to the ad hock scanning, automated scanning is also performed against your lab website. The automated tests are similar to the manual tests but the results are posted to a centralized scanning results dashboard along with the other workshop particpants. You can identify the scanning results for your site using the Unique Id found in the CloudFormation outputs. You can now proceed to the Remediate Phase .","title":"Website Scanning Environment and Tools - Automated Scanning"},{"location":"workshop/perimeter-layer/build/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Build Phase Environment setup To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. Note About Workshop and AWS Account We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. US West 2 (Oregon) US East 2 (Ohio) US East 1 (N. Virginia) EU West 1 (Ireland) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: AWS-sponsored event If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Automated Scanner: Set to true. Scanner Username: Enter the username provided by the workshop team. Scanner Password: Enter the password provided by the workshop team. Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Individual or an event not sponsored by AWS If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Automated Scanner: Set to false. Scanner Username: Enter null Scanner Password: Enter null Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Click Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. You can now proceed to the Assess Phase .","title":"Build Phase"},{"location":"workshop/perimeter-layer/build/#mitigating-common-web-application-attack-vectors-using-aws-waf-build-phase","text":"","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Build Phase"},{"location":"workshop/perimeter-layer/build/#environment-setup","text":"To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. Note About Workshop and AWS Account We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. US West 2 (Oregon) US East 2 (Ohio) US East 1 (N. Virginia) EU West 1 (Ireland) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: AWS-sponsored event If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Automated Scanner: Set to true. Scanner Username: Enter the username provided by the workshop team. Scanner Password: Enter the password provided by the workshop team. Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Individual or an event not sponsored by AWS If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Automated Scanner: Set to false. Scanner Username: Enter null Scanner Password: Enter null Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Click Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. You can now proceed to the Assess Phase .","title":"Environment setup"},{"location":"workshop/perimeter-layer/cleanup/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Cleanup Phase For those who are continuing to the Host Layer round If you are only going to complete the Perimeter Layer round, do not delete any resources yet. Continue the workshop with the Host Layer round . You will perform cleanup at the end of the workshop. If you are not moving on to the next round, follow the steps below to clean up the artifacts that were created. Go to the CloudFormation console and delete the stack that you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Note about Automated Scanner The automated scanner entry for your site will age out of the dashboard after several hours but you can continue to test your WAF rule set with the red team host script.","title":"Cleanup Phase"},{"location":"workshop/perimeter-layer/cleanup/#mitigating-common-web-application-attack-vectors-using-aws-waf-cleanup-phase","text":"For those who are continuing to the Host Layer round If you are only going to complete the Perimeter Layer round, do not delete any resources yet. Continue the workshop with the Host Layer round . You will perform cleanup at the end of the workshop. If you are not moving on to the next round, follow the steps below to clean up the artifacts that were created. Go to the CloudFormation console and delete the stack that you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Note about Automated Scanner The automated scanner entry for your site will age out of the dashboard after several hours but you can continue to test your WAF rule set with the red team host script.","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Cleanup Phase"},{"location":"workshop/perimeter-layer/getting-started/","text":"Getting Started Create or Identify Exisitng AWS account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Note About Workshop and AWS Account We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . Workshop Rounds Mitigating Common Web Application Attack Vectors Using AWS Web Application Firewall Automating Assessment and Remediation Using Amazon Inspector and AWS Systems Manager You are now setup for the workshop!","title":"Getting Started"},{"location":"workshop/perimeter-layer/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"workshop/perimeter-layer/getting-started/#create-or-identify-exisitng-aws-account","text":"In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Note About Workshop and AWS Account We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account.","title":"Create or Identify Exisitng AWS account"},{"location":"workshop/perimeter-layer/getting-started/#create-an-admin-user","text":"If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created.","title":"Create an admin user"},{"location":"workshop/perimeter-layer/getting-started/#add-credits-optional","text":"If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem .","title":"Add credits (optional)"},{"location":"workshop/perimeter-layer/getting-started/#workshop-rounds","text":"Mitigating Common Web Application Attack Vectors Using AWS Web Application Firewall Automating Assessment and Remediation Using Amazon Inspector and AWS Systems Manager You are now setup for the workshop!","title":"Workshop Rounds"},{"location":"workshop/perimeter-layer/remediate/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Remediate Phase In the previous Build Phase, you identified several vulnerabilities in your web application. You are now going to design and implement an AWS WAF ruleset to help mitigate these vulnerabilities. In this section you will do the following tasks: Identify the WAF ACL for your site AWS WAF Rule design and considerations Console Walkthrough - Creating a WAF Condition and Rule WAF Rule Creation and Solutions Identify the WAF ACL for your Site If needed, go to https://console.aws.amazon.com/console/home . You will be redirected to the AWS Management Console dashboard on successful login: Make sure you select the appropriate AWS Region when working in the AWS Management Console (top right corner, on the menu bar). From the Management Console dashboard, navigate to the AWS WAF & Shield service console. You can do that several ways: Type \u201cwaf\u201d in the AWS services panel search box and select the resulting option Expand the Services drop down menu (top left on the menu bar) and choose WAF & Shield Expand the All services area of the AWS services panel and choose WAF & Shield Once selected, you will be redirected to the AWS WAF & AWS Shield service console. You may see an initial landing page at first. Choose Go to AWS WAF: 3. In the side bar menu on the left, pick the Web ACLs option under the AWS WAF heading. If the list of Web ACLs appears empty select the correct AWS Region as indicated on your credentials card in the Filter dropdown. If you are sharing the same account with other participants you can identify your WAF ACL by the Id in the stack outputs. 4. Click on the WAF Web ACL Name to select the existing Web ACL. Once the detail pane is loaded on the left of your screen, you will see 2 tabs: Requests and Rules. Toggle to Rules: Validate that you are able to see a pre-existing rule, configured to block requests, and that your Web ACL is associated with an Application load balancer resource. You can drill down further into the properties of the existing rule, by clicking on the rule name. You should see 2 entries into the associated IP address list for the loopback/localhost IP addresses (127.0.0.0/8, ::1/128). AWS WAF Rule Design and Considerations Basics AWS WAF rules consist of conditions. Conditions are lists of specific filters (patterns) that are being matched against the HTTP request components processed by AWS WAF. The filters, including their attributes, are specific to the type of condition supported by AWS WAF. A condition, as a whole, is considered as matched , if any one of the listed filters is matched. Rules contain one or more conditions. Each condition attached to a rule is called a predicate. Predicates are evaluated using Boolean logic. A predicate is evaluated as matched or not matched (negated predicted), and multiple predicates are evaluated using Boolean AND \u2013 all predicates must match for the rule action to be triggered. Web ACLs are ordered lists of rules. They are evaluated in order for each HTTP request and the action of the first matching rule is taken by the WAF engine, whether that is to allow, block or count the request. If no rule matches, the default action of the web ACL prevails. Note About Conditions and Rules Conditions and rules are reusable resources within the region in which they are created. You should consider the effects of changes to WAF conditions and rules in your organizations change control procedures. Note About This Section In order to illustrate the process of creating WAF conditions and rules, we will walk through the creation of the first rule in your WAF ACL. The complete list of threats and solutions is available in the WAF Rule Creation and Solutions section. Rule Design Considerations: To create a rule, you have to create the relevant match conditions first. This process requires planning for effective rule building. Use the following guiding questions: What is the intended purpose of the rule? What HTTP request components apply to the purpose of the rule? Do you already have conditions targeting those request components that you can reuse? Is that desirable? How can you define the purpose of the rule in a Boolean logic expression? What conditions do you need to create to implement the logic? Are any transformations relevant to my input content type? AWS WAF Concepts: The following illustration shows AWS WAF Conditions, Rules and Web ACL's. The following illustration shows how AWS WAF checks the rules and performs the actions based on those rules. Example Rule Design and Creation: As an example, lets say we want to build a rule to detect and block SQL Injection in received in query strings. Let\u2019s see how these questions help us plan the implementation of the rule. This walkthrough will get you started with the ruleset required to mitigate the simulated threats in the workshop. It's purpose is to help you better understand the rule creation process. You will create the remaining rules from solution hints provided below. Sample Rule purpose: Detect SQL Injection in query string, use \u2018block\u2019 action in Web ACL HTTP request components: Request Method \u2013 form input typically gets submitted using a GET HTTP request method Query String \u2013 the SQL injection attempt is located in the query string Define the purpose of the rule using Boolean logic: If Query String contains suspected SQL Injection then block Sample Rule - Conditions to implement: SQL injection Match Condition targeting the request Query string Relevant transformations: SQL Injection Match Condition query strinb is URL encoded, so we will apply the URL_DECODE transformation. Rules to implement: Rule with 1 predicate matching SQL injection condition Console Walkthrough - Creating a Condition and Rule In the AWS WAF console, create a SQL injection condition by selecting SQL injection matching from the side-bar menu to the left of the console, under the Conditions heading. Click on Create Condition : 3. Provide filterSQLi for the Name and select the region where you deployed the stack. Add a filter (pattern) to the condition. Set the Part of the request to filter on to Query string and set the Transformation to URL decode . Click Add filter and then click Create . 4. With the condition created, and any additional conditions created based on need as well, you are ready to create a rule. In the AWS WAF console, select Rules from the side-bar menu to the left of the console, under the AWS WAF heading. 5. Click on Create Rule : 6. Provide matchSQLi for the name, metric name and sect the region where you deployed the stack. Set the rule type to Regular rule . 7. Add a condition to the rule. For our rule example, choose \u201cWhen a request\u201d does (no negation) match at least one of the filters in the SQL injection match condition . Choose the SQL injection condition you have previously created. 8. Click Add Condition and click Create at the bottom of the screen. 9. Follow the steps in the Identify the WAF ACL for your site section above to go back to the Rules tab of your web ACL. 10. Click Edit web ACL . 11. In the Rules dropdown, select your rule, and click Add rule to web ACL . 12. Reorder the rules as appropriate for your use case. 13. Click Update to persist the changes. Additional Resources For a more comprehensive discussion of common vulnerabilities for web applications, as well as how to mitigate them using AWS WAF, and other AWS services, please refer to the Use AWS WAF to Mitigate OWASP\u2019s Top 10 Web Application Vulnerabilities whitepaper . WAF Rule Creation and Solutions In this phase, we will have a set of 6 exercises walking you through the process of building a basic mitigation rule set for common vulnerabilities. We will build these rules from scratch, so you can gain familiarity with the AWS WAF programming model and you can then write rules specific to your applications. Note About Exercise Solutions For the exercises below, you will find the high level description and solution configuration for your web ACL. You can test your ACL ruleset at any time using the Red Team Host. For AWS sponsored event, you can also view test results on the WAF Lab Dashboard . 1. SQL Injection & Cross Site Scripting Mitigation Use the SQL injection, cross-site scripting, as well as string and regex matching conditions to build rules that mitigate injection attacks and cross site scripting attacks. Consider the following: - How does your web application accept end-user input (whether directly or indirectly). Which HTTP request components does that input get inserted into? - What kind of content encoding considerations do you need to factor in for the input format? - What considerations do you need to account for in regards to false positives? For example, does your application legitimately need to accept SQL statements as input? How do the requirements derived from the above questions affect your solution? Solution update the SQL injection condition named filterSQLi with 2 additional filters query_string, url decode You should have created this filter in the walk through body, html decode header, cookie, url decode create SQLi rule named matchSQLi type regular does match SQLi condition: filterSQLi create Cross-site scripting condition named filterXSS with 4 filters query_string, url decode body, html decode body, url decode header, cookie, url decode create a String and regex matching String match condition named filterXSSPathException with 1 filter. This demonstrates how to add an expception for the XSS rule. uri, starts with, no transform, /reportBuilder/Editor.aspx create a rule named matchXSS type regular does match XSS condition: filterXSS does not match string match condition: filterXSSPathException add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked 2. Enforce Request Hygiene Use the string and regex matching, size constraints and IP address match conditions to build rules that block non-conforming or low value HTTP requests. Consider the following: \u2022 Are there limits to the size of the various HTTP request components relevant to your web application? For example, does your application ever use URIs that are longer than 100 characters in size? \u2022 Are there specific HTTP request components without which your application cannot operate effectively (e.g. CSRF token header, authorization header, referrer header)? Build rules that ensure the requests your application ends up processing are valid, conforming and valuable. Solution create String and regex matching String match type condition named filterFormProcessor with 1 filter uri, starts with, no transform, /form.php create string match condition named filterPOSTMethod with 1 filter uri, exactly matches, no transform, /form.php create String and regex matching Regex match condition named filterCSRFToken with 1 filter header x-csrf-token ( type in manually ), url decode, matches pattern: ^[0-9a-f]{40}$ create rule named matchCSRF type regular does match string condition: filterFormProcessor does match string condition: filterPOSTMethod does not match regex match condition: filterCSRFToken add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked 3. Mitigate File Inclusion & Path Traversal Use the string and regex matching conditions to build rules that block specific patterns indicative of unwanted path traversal or file inclusion. Consider the following: Can end users browse the directory structure of your web folders? Do you have directory indexes enabled? Is your application (or any dependency components) use input parameters in filesystem or remote URL references? Do you adequately lock down access so input paths cannot be manipulated? What considerations do you need to account for in regards to false positives (directory traversal signature patterns)? Build rules that ensure the relevant HTTP request components used for input into paths do not contain known path traversal patterns. Solution create a String and regex matching String match type condition named filterTraversal with 3 filters uri, starts with, url_decode, /include query_string, contains, url_decode, ../ query_string, contains, url_decode, :// create rule named matchTraversal type regular does match string condition: filterTraversal add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked Note About Remaining Exercises The remaining exercises below are optional. You should proceed to the Verify Phase and come back to the content below if time permits. 4. Limit Attack Footprint (Optional) Use the string and regex matching conditions along with geo match and IP address match conditions to build rules that limit the attack footprint against the exposed components of your application. Consider the following: \u2022 Does your web application have server-side include components in the public web path? \u2022 Does your web application have components at exposed paths that are not used (or dependencies have such functions)? \u2022 Do you have administrative, management, status or health check paths and components that aren\u2019t meant for end user access? You should consider blocking access to such elements, or limiting access to known sources, either whitelisted IP addresses or geographic locations. Solution create Geo match conditon named filterAffiliates with 1 filter add country US, and RO create String and regex matching String match type condition named filterAdminUI with 1 filter uri, starts with, no transform, /admin create rule named matchAdminNotAffiliate type regular does match string condition: filterAdminUI does not match geo condition: filterAffiliates add rule to Web ACL 5. Detect & Mitigate Anomalies (Optional) What constitutes an anomaly in regards to your web application? A few common anomaly patterns are: Unusually elevated volume of requests in general Unusually elevated volumes of requests to specific URI paths Unusually elevated levels of requests generating specific non-HTTP status 200 responses Unusually elevated volumes from certain sources (IPs, geographies) Usual request signatures (referrers, user agent strings, content types, etc) Do you have mechanisms in place to detect such patterns? If so, can you build rules to mitigate them? Solution create String and regex match condition named filterLoginProcessor with 1 filter uri, starts with, no transform, /login.php create rule named matchRateLogin type rate-based, 2000 does match string condition: filterLoginProcessor does match string condition: filterPOSTMethod add rules to Web ACL 6. Reputation Lists, Nuisance Requests (Optional) Reputation lists (whitelists or blacklists) are a good way to filter and stop servicing low value requests. This can reduce operating costs, and reduce exposure to attack vectors. Reputation lists can be self-maintained: lists of identifiable actors that you have determined are undesired. They can be identified any number of ways: the source IP address the user agent string reuse of hijacked authorization or session tokens, attempting to make requests to paths that clearly do not exist in your application but are well known vulnerable software packages (probing) Build blacklists of such actors using the relevant conditions and set up rules to match and block them. An example IP-based blacklist already exists in your sandbox environment. Reputation lists can also be maintained by third parties. The AWS WAF Security Automations allow you to implement IP-based reputation lists. Solution edit the IP addresses condition named WafIpBlackList add a test IP address You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. create a String and regex matching String match condition named filterNoPath with 1 filter uri, starts with, no transform, /phpmyadmin Use the concepts you learned in the previous exercises to add the filterNoPath condition to your Web ACL. You can now proceed to the Verify Phase .","title":"Remediate Phase"},{"location":"workshop/perimeter-layer/remediate/#mitigating-common-web-application-attack-vectors-using-aws-waf-remediate-phase","text":"In the previous Build Phase, you identified several vulnerabilities in your web application. You are now going to design and implement an AWS WAF ruleset to help mitigate these vulnerabilities. In this section you will do the following tasks: Identify the WAF ACL for your site AWS WAF Rule design and considerations Console Walkthrough - Creating a WAF Condition and Rule WAF Rule Creation and Solutions","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Remediate Phase"},{"location":"workshop/perimeter-layer/remediate/#identify-the-waf-acl-for-your-site","text":"If needed, go to https://console.aws.amazon.com/console/home . You will be redirected to the AWS Management Console dashboard on successful login: Make sure you select the appropriate AWS Region when working in the AWS Management Console (top right corner, on the menu bar). From the Management Console dashboard, navigate to the AWS WAF & Shield service console. You can do that several ways: Type \u201cwaf\u201d in the AWS services panel search box and select the resulting option Expand the Services drop down menu (top left on the menu bar) and choose WAF & Shield Expand the All services area of the AWS services panel and choose WAF & Shield Once selected, you will be redirected to the AWS WAF & AWS Shield service console. You may see an initial landing page at first. Choose Go to AWS WAF: 3. In the side bar menu on the left, pick the Web ACLs option under the AWS WAF heading. If the list of Web ACLs appears empty select the correct AWS Region as indicated on your credentials card in the Filter dropdown. If you are sharing the same account with other participants you can identify your WAF ACL by the Id in the stack outputs. 4. Click on the WAF Web ACL Name to select the existing Web ACL. Once the detail pane is loaded on the left of your screen, you will see 2 tabs: Requests and Rules. Toggle to Rules: Validate that you are able to see a pre-existing rule, configured to block requests, and that your Web ACL is associated with an Application load balancer resource. You can drill down further into the properties of the existing rule, by clicking on the rule name. You should see 2 entries into the associated IP address list for the loopback/localhost IP addresses (127.0.0.0/8, ::1/128).","title":"Identify the WAF ACL for your Site"},{"location":"workshop/perimeter-layer/remediate/#aws-waf-rule-design-and-considerations","text":"","title":"AWS WAF Rule Design and Considerations"},{"location":"workshop/perimeter-layer/remediate/#basics","text":"AWS WAF rules consist of conditions. Conditions are lists of specific filters (patterns) that are being matched against the HTTP request components processed by AWS WAF. The filters, including their attributes, are specific to the type of condition supported by AWS WAF. A condition, as a whole, is considered as matched , if any one of the listed filters is matched. Rules contain one or more conditions. Each condition attached to a rule is called a predicate. Predicates are evaluated using Boolean logic. A predicate is evaluated as matched or not matched (negated predicted), and multiple predicates are evaluated using Boolean AND \u2013 all predicates must match for the rule action to be triggered. Web ACLs are ordered lists of rules. They are evaluated in order for each HTTP request and the action of the first matching rule is taken by the WAF engine, whether that is to allow, block or count the request. If no rule matches, the default action of the web ACL prevails. Note About Conditions and Rules Conditions and rules are reusable resources within the region in which they are created. You should consider the effects of changes to WAF conditions and rules in your organizations change control procedures. Note About This Section In order to illustrate the process of creating WAF conditions and rules, we will walk through the creation of the first rule in your WAF ACL. The complete list of threats and solutions is available in the WAF Rule Creation and Solutions section.","title":"Basics"},{"location":"workshop/perimeter-layer/remediate/#rule-design-considerations","text":"To create a rule, you have to create the relevant match conditions first. This process requires planning for effective rule building. Use the following guiding questions: What is the intended purpose of the rule? What HTTP request components apply to the purpose of the rule? Do you already have conditions targeting those request components that you can reuse? Is that desirable? How can you define the purpose of the rule in a Boolean logic expression? What conditions do you need to create to implement the logic? Are any transformations relevant to my input content type?","title":"Rule Design Considerations:"},{"location":"workshop/perimeter-layer/remediate/#aws-waf-concepts","text":"The following illustration shows AWS WAF Conditions, Rules and Web ACL's. The following illustration shows how AWS WAF checks the rules and performs the actions based on those rules.","title":"AWS WAF Concepts:"},{"location":"workshop/perimeter-layer/remediate/#example-rule-design-and-creation","text":"As an example, lets say we want to build a rule to detect and block SQL Injection in received in query strings. Let\u2019s see how these questions help us plan the implementation of the rule. This walkthrough will get you started with the ruleset required to mitigate the simulated threats in the workshop. It's purpose is to help you better understand the rule creation process. You will create the remaining rules from solution hints provided below.","title":"Example Rule Design and Creation:"},{"location":"workshop/perimeter-layer/remediate/#sample-rule-purpose","text":"Detect SQL Injection in query string, use \u2018block\u2019 action in Web ACL","title":"Sample Rule purpose:"},{"location":"workshop/perimeter-layer/remediate/#http-request-components","text":"Request Method \u2013 form input typically gets submitted using a GET HTTP request method Query String \u2013 the SQL injection attempt is located in the query string","title":"HTTP request components:"},{"location":"workshop/perimeter-layer/remediate/#define-the-purpose-of-the-rule-using-boolean-logic","text":"If Query String contains suspected SQL Injection then block","title":"Define the purpose of the rule using Boolean logic:"},{"location":"workshop/perimeter-layer/remediate/#sample-rule-conditions-to-implement","text":"SQL injection Match Condition targeting the request Query string","title":"Sample Rule - Conditions to implement:"},{"location":"workshop/perimeter-layer/remediate/#relevant-transformations","text":"SQL Injection Match Condition query strinb is URL encoded, so we will apply the URL_DECODE transformation.","title":"Relevant transformations:"},{"location":"workshop/perimeter-layer/remediate/#rules-to-implement","text":"Rule with 1 predicate matching SQL injection condition","title":"Rules to implement:"},{"location":"workshop/perimeter-layer/remediate/#console-walkthrough-creating-a-condition-and-rule","text":"In the AWS WAF console, create a SQL injection condition by selecting SQL injection matching from the side-bar menu to the left of the console, under the Conditions heading. Click on Create Condition : 3. Provide filterSQLi for the Name and select the region where you deployed the stack. Add a filter (pattern) to the condition. Set the Part of the request to filter on to Query string and set the Transformation to URL decode . Click Add filter and then click Create . 4. With the condition created, and any additional conditions created based on need as well, you are ready to create a rule. In the AWS WAF console, select Rules from the side-bar menu to the left of the console, under the AWS WAF heading. 5. Click on Create Rule : 6. Provide matchSQLi for the name, metric name and sect the region where you deployed the stack. Set the rule type to Regular rule . 7. Add a condition to the rule. For our rule example, choose \u201cWhen a request\u201d does (no negation) match at least one of the filters in the SQL injection match condition . Choose the SQL injection condition you have previously created. 8. Click Add Condition and click Create at the bottom of the screen. 9. Follow the steps in the Identify the WAF ACL for your site section above to go back to the Rules tab of your web ACL. 10. Click Edit web ACL . 11. In the Rules dropdown, select your rule, and click Add rule to web ACL . 12. Reorder the rules as appropriate for your use case. 13. Click Update to persist the changes. Additional Resources For a more comprehensive discussion of common vulnerabilities for web applications, as well as how to mitigate them using AWS WAF, and other AWS services, please refer to the Use AWS WAF to Mitigate OWASP\u2019s Top 10 Web Application Vulnerabilities whitepaper .","title":"Console Walkthrough - Creating a Condition and Rule"},{"location":"workshop/perimeter-layer/remediate/#waf-rule-creation-and-solutions","text":"In this phase, we will have a set of 6 exercises walking you through the process of building a basic mitigation rule set for common vulnerabilities. We will build these rules from scratch, so you can gain familiarity with the AWS WAF programming model and you can then write rules specific to your applications. Note About Exercise Solutions For the exercises below, you will find the high level description and solution configuration for your web ACL. You can test your ACL ruleset at any time using the Red Team Host. For AWS sponsored event, you can also view test results on the WAF Lab Dashboard .","title":"WAF Rule Creation and Solutions"},{"location":"workshop/perimeter-layer/remediate/#1-sql-injection-cross-site-scripting-mitigation","text":"Use the SQL injection, cross-site scripting, as well as string and regex matching conditions to build rules that mitigate injection attacks and cross site scripting attacks. Consider the following: - How does your web application accept end-user input (whether directly or indirectly). Which HTTP request components does that input get inserted into? - What kind of content encoding considerations do you need to factor in for the input format? - What considerations do you need to account for in regards to false positives? For example, does your application legitimately need to accept SQL statements as input? How do the requirements derived from the above questions affect your solution? Solution update the SQL injection condition named filterSQLi with 2 additional filters query_string, url decode You should have created this filter in the walk through body, html decode header, cookie, url decode create SQLi rule named matchSQLi type regular does match SQLi condition: filterSQLi create Cross-site scripting condition named filterXSS with 4 filters query_string, url decode body, html decode body, url decode header, cookie, url decode create a String and regex matching String match condition named filterXSSPathException with 1 filter. This demonstrates how to add an expception for the XSS rule. uri, starts with, no transform, /reportBuilder/Editor.aspx create a rule named matchXSS type regular does match XSS condition: filterXSS does not match string match condition: filterXSSPathException add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked","title":"1. SQL Injection &amp; Cross Site Scripting Mitigation"},{"location":"workshop/perimeter-layer/remediate/#2-enforce-request-hygiene","text":"Use the string and regex matching, size constraints and IP address match conditions to build rules that block non-conforming or low value HTTP requests. Consider the following: \u2022 Are there limits to the size of the various HTTP request components relevant to your web application? For example, does your application ever use URIs that are longer than 100 characters in size? \u2022 Are there specific HTTP request components without which your application cannot operate effectively (e.g. CSRF token header, authorization header, referrer header)? Build rules that ensure the requests your application ends up processing are valid, conforming and valuable. Solution create String and regex matching String match type condition named filterFormProcessor with 1 filter uri, starts with, no transform, /form.php create string match condition named filterPOSTMethod with 1 filter uri, exactly matches, no transform, /form.php create String and regex matching Regex match condition named filterCSRFToken with 1 filter header x-csrf-token ( type in manually ), url decode, matches pattern: ^[0-9a-f]{40}$ create rule named matchCSRF type regular does match string condition: filterFormProcessor does match string condition: filterPOSTMethod does not match regex match condition: filterCSRFToken add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked","title":"2. Enforce Request Hygiene"},{"location":"workshop/perimeter-layer/remediate/#3-mitigate-file-inclusion-path-traversal","text":"Use the string and regex matching conditions to build rules that block specific patterns indicative of unwanted path traversal or file inclusion. Consider the following: Can end users browse the directory structure of your web folders? Do you have directory indexes enabled? Is your application (or any dependency components) use input parameters in filesystem or remote URL references? Do you adequately lock down access so input paths cannot be manipulated? What considerations do you need to account for in regards to false positives (directory traversal signature patterns)? Build rules that ensure the relevant HTTP request components used for input into paths do not contain known path traversal patterns. Solution create a String and regex matching String match type condition named filterTraversal with 3 filters uri, starts with, url_decode, /include query_string, contains, url_decode, ../ query_string, contains, url_decode, :// create rule named matchTraversal type regular does match string condition: filterTraversal add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked Note About Remaining Exercises The remaining exercises below are optional. You should proceed to the Verify Phase and come back to the content below if time permits.","title":"3. Mitigate File Inclusion &amp; Path Traversal"},{"location":"workshop/perimeter-layer/remediate/#4-limit-attack-footprint-optional","text":"Use the string and regex matching conditions along with geo match and IP address match conditions to build rules that limit the attack footprint against the exposed components of your application. Consider the following: \u2022 Does your web application have server-side include components in the public web path? \u2022 Does your web application have components at exposed paths that are not used (or dependencies have such functions)? \u2022 Do you have administrative, management, status or health check paths and components that aren\u2019t meant for end user access? You should consider blocking access to such elements, or limiting access to known sources, either whitelisted IP addresses or geographic locations. Solution create Geo match conditon named filterAffiliates with 1 filter add country US, and RO create String and regex matching String match type condition named filterAdminUI with 1 filter uri, starts with, no transform, /admin create rule named matchAdminNotAffiliate type regular does match string condition: filterAdminUI does not match geo condition: filterAffiliates add rule to Web ACL","title":"4. Limit Attack Footprint (Optional)"},{"location":"workshop/perimeter-layer/remediate/#5-detect-mitigate-anomalies-optional","text":"What constitutes an anomaly in regards to your web application? A few common anomaly patterns are: Unusually elevated volume of requests in general Unusually elevated volumes of requests to specific URI paths Unusually elevated levels of requests generating specific non-HTTP status 200 responses Unusually elevated volumes from certain sources (IPs, geographies) Usual request signatures (referrers, user agent strings, content types, etc) Do you have mechanisms in place to detect such patterns? If so, can you build rules to mitigate them? Solution create String and regex match condition named filterLoginProcessor with 1 filter uri, starts with, no transform, /login.php create rule named matchRateLogin type rate-based, 2000 does match string condition: filterLoginProcessor does match string condition: filterPOSTMethod add rules to Web ACL","title":"5. Detect &amp; Mitigate Anomalies (Optional)"},{"location":"workshop/perimeter-layer/remediate/#6-reputation-lists-nuisance-requests-optional","text":"Reputation lists (whitelists or blacklists) are a good way to filter and stop servicing low value requests. This can reduce operating costs, and reduce exposure to attack vectors. Reputation lists can be self-maintained: lists of identifiable actors that you have determined are undesired. They can be identified any number of ways: the source IP address the user agent string reuse of hijacked authorization or session tokens, attempting to make requests to paths that clearly do not exist in your application but are well known vulnerable software packages (probing) Build blacklists of such actors using the relevant conditions and set up rules to match and block them. An example IP-based blacklist already exists in your sandbox environment. Reputation lists can also be maintained by third parties. The AWS WAF Security Automations allow you to implement IP-based reputation lists. Solution edit the IP addresses condition named WafIpBlackList add a test IP address You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. create a String and regex matching String match condition named filterNoPath with 1 filter uri, starts with, no transform, /phpmyadmin Use the concepts you learned in the previous exercises to add the filterNoPath condition to your Web ACL. You can now proceed to the Verify Phase .","title":"6. Reputation Lists, Nuisance Requests (Optional)"},{"location":"workshop/perimeter-layer/verify/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Verify Phase In the previous remediation phase, you implemented an AWS WAF ruleset to protect your site from common attack vectors. You are now going to reassess the posture of the site to confirm the rules are performing as intended and blocking the simulated malicious requests. Confirm malicious requests are blocked by WAF policy Implement WAF monitoring dashboard using Amazon CloudWatch (Optional) Confirm malicious requests are blocked by WAF policy If needed, start a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint Confirm that all of the tests in the script pass. If requests (other than canary) are not being blocked, go back to the remediate phase and confirm your conditions and rules are properly configured. If the the auomated scanner is being used for your event (AWS sponsored), you should also see green for your unique Id on the WAF scanning results dashboard . Implement WAF monitoring dashboard using Amazon CloudWatch (Optional) Use CloudWatch Dashboards to create a monitoring system for your protection layer. The following AWS article details this process: https://aws.amazon.com/blogs/aws/cloudwatch-dashboards-create-use-customized-metrics-views/ Here are some sample of metrics that you can use. Starting from top left side, in clockwise order, we have: Allowed vs Blocked Requests : if you receive a surge in allowed access (2 times normal peak access) or blocked access (any period that identifies more than 1,000 blocked requests), you can configure CloudWatch to send an alert. The idea here is to track known DDoS (when blocked requests increase) or new version of attack (when the requests are allowed to access the system); BytesDownloaded vs. Uploaded : help you identify when DDoS attack targets a service that doesn't need to receive a huge amount of access in order to exhaust resources (ex: search engine component sending MBs of information for one specific request parameters set); ELB Spillover and Queue length : use these metrics to verify if the attack is already causing damage to the infrastructure and/or for some reason, the attacker is bypassing protection layer and attacking directly unprotected resources; ELB Request Count : same as above, helps you identify damage by checking if the attacker is bypassing protection layer and/or CloudFront cache; review rules to increase cache hit rate; ELB Healthy Host : another system health check metric; ASG CPU Utilization : identify if the attacker is not only bypassing the CloudFront/WAF but also the ELB layer, also use to identify the damage impact of an attack; This concludes the Perimeter Round. You can now procede to the Host Layer round or if you are finished, the Cleanup","title":"Verify Phase"},{"location":"workshop/perimeter-layer/verify/#mitigating-common-web-application-attack-vectors-using-aws-waf-verify-phase","text":"In the previous remediation phase, you implemented an AWS WAF ruleset to protect your site from common attack vectors. You are now going to reassess the posture of the site to confirm the rules are performing as intended and blocking the simulated malicious requests. Confirm malicious requests are blocked by WAF policy Implement WAF monitoring dashboard using Amazon CloudWatch (Optional)","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Verify Phase"},{"location":"workshop/perimeter-layer/verify/#confirm-malicious-requests-are-blocked-by-waf-policy","text":"If needed, start a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint Confirm that all of the tests in the script pass. If requests (other than canary) are not being blocked, go back to the remediate phase and confirm your conditions and rules are properly configured. If the the auomated scanner is being used for your event (AWS sponsored), you should also see green for your unique Id on the WAF scanning results dashboard .","title":"Confirm malicious requests are blocked by WAF policy"},{"location":"workshop/perimeter-layer/verify/#implement-waf-monitoring-dashboard-using-amazon-cloudwatch-optional","text":"Use CloudWatch Dashboards to create a monitoring system for your protection layer. The following AWS article details this process: https://aws.amazon.com/blogs/aws/cloudwatch-dashboards-create-use-customized-metrics-views/ Here are some sample of metrics that you can use. Starting from top left side, in clockwise order, we have: Allowed vs Blocked Requests : if you receive a surge in allowed access (2 times normal peak access) or blocked access (any period that identifies more than 1,000 blocked requests), you can configure CloudWatch to send an alert. The idea here is to track known DDoS (when blocked requests increase) or new version of attack (when the requests are allowed to access the system); BytesDownloaded vs. Uploaded : help you identify when DDoS attack targets a service that doesn't need to receive a huge amount of access in order to exhaust resources (ex: search engine component sending MBs of information for one specific request parameters set); ELB Spillover and Queue length : use these metrics to verify if the attack is already causing damage to the infrastructure and/or for some reason, the attacker is bypassing protection layer and attacking directly unprotected resources; ELB Request Count : same as above, helps you identify damage by checking if the attacker is bypassing protection layer and/or CloudFront cache; review rules to increase cache hit rate; ELB Healthy Host : another system health check metric; ASG CPU Utilization : identify if the attacker is not only bypassing the CloudFront/WAF but also the ELB layer, also use to identify the damage impact of an attack; This concludes the Perimeter Round. You can now procede to the Host Layer round or if you are finished, the Cleanup","title":"Implement WAF monitoring dashboard using Amazon CloudWatch (Optional)"}]}