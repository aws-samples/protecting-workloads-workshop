{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Protecting Workloads Workshops Workshop - Protecting Workloads on AWS from the Instance to the Edge Abstract In this workshop, you will use AWS WAF, Amazon Inspector, and AWS Systems Manager to build an effective set of controls around your AWS workloads. Learn to use AWS WAF to mitigate common attack vectors against web applications such as SQL injection and cross-site scripting. Additionally, learn how to use Amazon Inspector and Systems Manager to automate security assessments and operational tasks such as patching and configuration management across your Amazon Elastic Compute Cloud (Amazon EC2) fleet. To do this workshop, you'll need a laptop, an active AWS Account, an AWS IAM administrator, and familiarity with core AWS services.","title":"Home"},{"location":"#aws-protecting-workloads-workshops","text":"","title":"AWS Protecting Workloads Workshops"},{"location":"#workshop-protecting-workloads-on-aws-from-the-instance-to-the-edge","text":"","title":"Workshop - Protecting Workloads on AWS from the Instance to the Edge"},{"location":"#abstract","text":"In this workshop, you will use AWS WAF, Amazon Inspector, and AWS Systems Manager to build an effective set of controls around your AWS workloads. Learn to use AWS WAF to mitigate common attack vectors against web applications such as SQL injection and cross-site scripting. Additionally, learn how to use Amazon Inspector and Systems Manager to automate security assessments and operational tasks such as patching and configuration management across your Amazon Elastic Compute Cloud (Amazon EC2) fleet. To do this workshop, you'll need a laptop, an active AWS Account, an AWS IAM administrator, and familiarity with core AWS services.","title":"Abstract"},{"location":"cleanup/","text":"AWS Protecting Workloads Workshop - Cleanup Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"AWS Protecting Workloads Workshop - Cleanup"},{"location":"cleanup/#aws-protecting-workloads-workshop-cleanup","text":"Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"AWS Protecting Workloads Workshop - Cleanup"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing Guidelines"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"workshop/","text":"Protecting workloads on AWS from the Instance to the Edge Welcome to the AWS Protecting Workloads Workshop! In this workshop, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use AWS Web Application Firewall (WAF), Amazon Inspector and AWS Systems Manager to identify the vulnerabilities and remediate them. Scenario Welcome to Widgets LLC! You have just joined the team and your first task is to enhance security for the company website. The site runs on Linux, PHP and Apache and uses an EC2 an autoscaling group behind an Application Load Balancer (ALB). After an initial architecture assessment you have found multiple vulnerabilities and configuration issues. The dev team is swamped and will not be able to remediate code level issues for several weeks. Your mission in this workshop round is to build an effective set of controls that mitigate common attack vectors against web applications, and provide you with the monitoring capabilities needed to react to emerging threats when they occur. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Before you Begin Please review the architecture diagram below and the getting started notes before proceeding. Optionally download the Workshop Companion Guide . Workshop Architecture","title":"Scenario"},{"location":"workshop/#protecting-workloads-on-aws-from-the-instance-to-the-edge","text":"Welcome to the AWS Protecting Workloads Workshop! In this workshop, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use AWS Web Application Firewall (WAF), Amazon Inspector and AWS Systems Manager to identify the vulnerabilities and remediate them.","title":"Protecting workloads on AWS from the Instance to the Edge"},{"location":"workshop/#scenario","text":"Welcome to Widgets LLC! You have just joined the team and your first task is to enhance security for the company website. The site runs on Linux, PHP and Apache and uses an EC2 an autoscaling group behind an Application Load Balancer (ALB). After an initial architecture assessment you have found multiple vulnerabilities and configuration issues. The dev team is swamped and will not be able to remediate code level issues for several weeks. Your mission in this workshop round is to build an effective set of controls that mitigate common attack vectors against web applications, and provide you with the monitoring capabilities needed to react to emerging threats when they occur. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Before you Begin Please review the architecture diagram below and the getting started notes before proceeding. Optionally download the Workshop Companion Guide .","title":"Scenario"},{"location":"workshop/#workshop-architecture","text":"","title":"Workshop Architecture"},{"location":"workshop/build/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Build Phase Environment setup To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Go to the CloudFormation console. Click here to proceed to the Assess Phase of the Perimeter Layer. Optionally download the Workshop Companion Guide . Click here if you're not at an AWS event or are using your own account To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. US West 2 (Oregon) US East 2 (Ohio) US East 1 (N. Virginia) EU West 1 (Ireland) AP Southeast 2 (Sydney) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: info \"Individual or an event not sponsored by AWS\" If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Automated Scanner: Set to false. Scanner Username: Enter null Scanner Password: Enter null Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can obtain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Click Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. You can now proceed to the Assess Phase of the Perimeter Layer .","title":"Build Phase"},{"location":"workshop/build/#mitigating-common-web-application-attack-vectors-using-aws-waf-build-phase","text":"","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Build Phase"},{"location":"workshop/build/#environment-setup","text":"To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Go to the CloudFormation console. Click here to proceed to the Assess Phase of the Perimeter Layer. Optionally download the Workshop Companion Guide . Click here if you're not at an AWS event or are using your own account To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. US West 2 (Oregon) US East 2 (Ohio) US East 1 (N. Virginia) EU West 1 (Ireland) AP Southeast 2 (Sydney) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: info \"Individual or an event not sponsored by AWS\" If you are sharing an AWS account with someone else in the same region, change the name of the stack to pww-yourinitials Automated Scanner: Set to false. Scanner Username: Enter null Scanner Password: Enter null Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can obtain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. Keep the defaults for the rest of the parameters. Click Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. You can now proceed to the Assess Phase of the Perimeter Layer .","title":"Environment setup"},{"location":"workshop/cleanup/","text":"AWS Protecting Workloads Workshop - Cleanup Do not perform cleanup if you are at an AWS event where the Event Engine is being used. This is handled automatically. Click here if you're not at an AWS event or are using your own account Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"Cleanup"},{"location":"workshop/cleanup/#aws-protecting-workloads-workshop-cleanup","text":"Do not perform cleanup if you are at an AWS event where the Event Engine is being used. This is handled automatically. Click here if you're not at an AWS event or are using your own account Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associdated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"AWS Protecting Workloads Workshop - Cleanup"},{"location":"workshop/getting-started/","text":"Getting Started Accessing AWS Event Engine To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Go to the CloudFormation console. Click here to proceed to the Assess Phase of the Perimeter Layer. Optionally download the Workshop Companion Guide . Click here if you're not at an AWS event or are using your own account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional ) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshop!","title":"Getting Started"},{"location":"workshop/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"workshop/getting-started/#accessing-aws-event-engine","text":"To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Go to the CloudFormation console. Click here to proceed to the Assess Phase of the Perimeter Layer. Optionally download the Workshop Companion Guide . Click here if you're not at an AWS event or are using your own account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional ) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshop!","title":"Accessing AWS Event Engine"},{"location":"workshop/license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"workshop/license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"workshop/host-layer/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round In this round, you will start with environment built in the Perimeter Round which consists of Amazon Linux 2 web servers behind an application load balancer. You will then use Amazon Inspector and AWS Systems Manager to identify the host layer vulnerabilities and remediate them. Level : Intermediate - Advanced Duration : 1 hour CSF Functions : Protect CAF Components : Preventive Phases in the Host Layer round To begin the workshop, proceed to the Assess phase below. Assess Remediate Verify","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round"},{"location":"workshop/host-layer/#identifying-and-remediating-host-vulnerabilities-host-layer-round","text":"In this round, you will start with environment built in the Perimeter Round which consists of Amazon Linux 2 web servers behind an application load balancer. You will then use Amazon Inspector and AWS Systems Manager to identify the host layer vulnerabilities and remediate them. Level : Intermediate - Advanced Duration : 1 hour CSF Functions : Protect CAF Components : Preventive","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round"},{"location":"workshop/host-layer/#phases-in-the-host-layer-round","text":"To begin the workshop, proceed to the Assess phase below. Assess Remediate Verify","title":"Phases in the Host Layer round"},{"location":"workshop/host-layer/assess/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Assess Phase In the previous Build Phase, you deployed a CloudFormation stack that contains some Amazon EC2 instances behind an application load balancer. You are now going to learn about AWS Inspector. AWS Inspector assesses the instances and identifies security findings that can be remediated. To save time, the CloudFormation teamplate will run an initial Inspector assessment for you. In later phases of the workshop, you will apply patches using AWS Systems Manager and then run another Inspector assessment to see if there is any change in the number of findings. Before you can assess the instances with Amazon Inspector, you need to identify the instances that you want to assess. In small environments, you can select the instance IDs from a list but in environments with hundreds or thousands of instance, you need an easier way to select them. For this reason, you are going to learn how to use tags to select the instances on which you will install the Amazon Inspector agent. Tags are labels that can be attached to AWS resources to make it easier to act on them collectively. In this section you will do the following tasks: Examine the CloudFormation stack you built to learn about the tags that were applied by AWS CloudFormation. Learn about Amazon Inspector targets, templates, and rules packages. Examine Amazon Inspector findings Workshop Architecture Examine the stack that you built and its tags Go to the CloudFormation console in the same AWS region where the stack was created. You should see a list of stacks similar to the figure below. Your console layout may look different depending on the preferences in your account. Locate the stack you created. In this documentation, the name of the stack is pww . If you are doing this workshop at an AWS event, the stackname may be much longer. Make sure you can see the entire stack name. Copy the stack name into a scratch file on your workstation in case you need it later. If you see a check box to the left of the stack name, click the check box to the left of the stack name and then click the Resources tab. If you don't see a check box, just click the Resources tab. You will see a list of resources that were deployed by the stack as shown in the figure below. The Type column lists the type of the resouces. Notice that you will not see any resources of type AWS::EC2::Instance even though there are now EC2 instances running. The reason for this is that the CloudFormation stack did not deploy any - at least not directly. The stack did, however, deploy an auto scaling group with a launch configuration that in turn launched the instances. You will now look at the auto scaling group and see how it supports tagging. Continue scrolling through the resources shown by CloudFormation and look for a resource named AutoScalingGroup as shown in the picture below. Click the hyperlink next to AutoScalingGroup. This will take you to the Amazon EC2 console and display the auto scaling group. Scroll down and click on the Tags tab to see how the auto scaling group handles tags. Your console display should look similar to the picture below. The picture above shows that there are four tags that are propogated to every EC2 instance created by the auto scaling group. The tags include a Name tag and three additional tags that are generated by CloudFormation. This tells us that every EC2instance that is launched by the auto scaling group will have a Name tag with the value of pww-node . In a production environment, you may have a large number of resources that spin up and spin down because of the elasticity that AWS offers. If you understand how tags are applied you can more easily manage the environment regardless of how many instances exist at any point in time. You will now learn how to look up the Amazon EC2 instances using tags. Go to the Amazon EC2 console and look for instances having a name that begins with the stack name followed by -node , pww-node in this example. If you cannot see them, type the instance name ( pww-node in this case) into the search box. Select one of them by checking the box to the left of the instance and then click on the Tags tab. You should see a table like that in the figure below. Notice that the instance has tags reflecting the CloudFormation stack name and stack id. These tags are added because of settings in the auto scaling group which propogate tags to newly created instances. You have now learned about the tags that you can use to look up AWS resources. You will now learn how tags can be used within Amazon Inspector to select the instances that will be assessed. Explore Amazon Inspector Understanding Amazon Inspector targets Go to the Amazon Inspector console. Click Assessment Targets on the left menu. Assessment targets represent a group of EC2 instances that Inspector will assess. You will see a target whose name begins with InspectorTarget . Click on the arrow widget to open the target and display the details. You should see something similar to the image below. In the figure above, notice that the Use Tags section contains a key/value pair with the entries aws:cloudformation:stack-name and pww respectively. This Inspector target is configured to select all instances that were started by the CloudFormation stack. Click the Preview Target button. A new window opens as shown below. You now see there are three Instances that Inspector will assess based on the configuration of the target. Click the Assessment Templates on the left menu. A list of assessment templates appears as shown below. You will see an assement template whose name begins with AssessmentTemplate . Assessment templates represent the selection of a target and one or more rules packages. A rules package is a collection of rules that represent security checks. This template assesses the previously mentioned target against the following two rules packages: Common Vulnerabilities and Exposures: The rules in this package help verify whether the EC2 instances in your assessment targets are exposed to common vulnerabilities and exposures (CVEs). Attacks can exploit unpatched vulnerabilities to compromise the confidentiality, integrity, or availability of your service or data. The CVE system provides a reference method for publicly known information security vulnerabilities and exposures. For more information, see https://cve.mitre.org/ {target=_blank}. You typically remediate findings from this rules package by installing patches. Security Best Practices: The rules in this package help determine whether your systems are configured securely. For example, one rule in this package checks to see if root login has been disabled over ssh. You typically remediate the findings by adjusting configuration settings. On the Amazon Inspector menu, click Assessment runs . You should see an entry for the assesment that was started on your behalf. If the status is not, Analysis complete, then periodically refresh the screen until the status changes to Analysis complete as shown in the figure below. On the line that represents your most recent run, make note of the number in the Findings column (177 in this diagram). After you perform the remediation later in this workshop, that number should decrease. Click on the number in the Findings column. The findings associated with the run will appear as shown below. You will see one of the findings has been expanded to reveal more details. The middle section of the finding has been removed to save space. Now that you have learned about Inspector assessments, you are ready to perform some remediation. You will then run an Inspector assessment yourself to see if the number of findings has changed. Click here to proceed to the Remediate Phase.","title":"Assess Phase"},{"location":"workshop/host-layer/assess/#identifying-and-remediating-host-vulnerabilities-host-layer-round-assess-phase","text":"In the previous Build Phase, you deployed a CloudFormation stack that contains some Amazon EC2 instances behind an application load balancer. You are now going to learn about AWS Inspector. AWS Inspector assesses the instances and identifies security findings that can be remediated. To save time, the CloudFormation teamplate will run an initial Inspector assessment for you. In later phases of the workshop, you will apply patches using AWS Systems Manager and then run another Inspector assessment to see if there is any change in the number of findings. Before you can assess the instances with Amazon Inspector, you need to identify the instances that you want to assess. In small environments, you can select the instance IDs from a list but in environments with hundreds or thousands of instance, you need an easier way to select them. For this reason, you are going to learn how to use tags to select the instances on which you will install the Amazon Inspector agent. Tags are labels that can be attached to AWS resources to make it easier to act on them collectively. In this section you will do the following tasks: Examine the CloudFormation stack you built to learn about the tags that were applied by AWS CloudFormation. Learn about Amazon Inspector targets, templates, and rules packages. Examine Amazon Inspector findings Workshop Architecture","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Assess Phase"},{"location":"workshop/host-layer/assess/#examine-the-stack-that-you-built-and-its-tags","text":"Go to the CloudFormation console in the same AWS region where the stack was created. You should see a list of stacks similar to the figure below. Your console layout may look different depending on the preferences in your account. Locate the stack you created. In this documentation, the name of the stack is pww . If you are doing this workshop at an AWS event, the stackname may be much longer. Make sure you can see the entire stack name. Copy the stack name into a scratch file on your workstation in case you need it later. If you see a check box to the left of the stack name, click the check box to the left of the stack name and then click the Resources tab. If you don't see a check box, just click the Resources tab. You will see a list of resources that were deployed by the stack as shown in the figure below. The Type column lists the type of the resouces. Notice that you will not see any resources of type AWS::EC2::Instance even though there are now EC2 instances running. The reason for this is that the CloudFormation stack did not deploy any - at least not directly. The stack did, however, deploy an auto scaling group with a launch configuration that in turn launched the instances. You will now look at the auto scaling group and see how it supports tagging. Continue scrolling through the resources shown by CloudFormation and look for a resource named AutoScalingGroup as shown in the picture below. Click the hyperlink next to AutoScalingGroup. This will take you to the Amazon EC2 console and display the auto scaling group. Scroll down and click on the Tags tab to see how the auto scaling group handles tags. Your console display should look similar to the picture below. The picture above shows that there are four tags that are propogated to every EC2 instance created by the auto scaling group. The tags include a Name tag and three additional tags that are generated by CloudFormation. This tells us that every EC2instance that is launched by the auto scaling group will have a Name tag with the value of pww-node . In a production environment, you may have a large number of resources that spin up and spin down because of the elasticity that AWS offers. If you understand how tags are applied you can more easily manage the environment regardless of how many instances exist at any point in time. You will now learn how to look up the Amazon EC2 instances using tags. Go to the Amazon EC2 console and look for instances having a name that begins with the stack name followed by -node , pww-node in this example. If you cannot see them, type the instance name ( pww-node in this case) into the search box. Select one of them by checking the box to the left of the instance and then click on the Tags tab. You should see a table like that in the figure below. Notice that the instance has tags reflecting the CloudFormation stack name and stack id. These tags are added because of settings in the auto scaling group which propogate tags to newly created instances. You have now learned about the tags that you can use to look up AWS resources. You will now learn how tags can be used within Amazon Inspector to select the instances that will be assessed.","title":"Examine the stack that you built and its tags"},{"location":"workshop/host-layer/assess/#explore-amazon-inspector","text":"","title":"Explore Amazon Inspector"},{"location":"workshop/host-layer/assess/#understanding-amazon-inspector-targets","text":"Go to the Amazon Inspector console. Click Assessment Targets on the left menu. Assessment targets represent a group of EC2 instances that Inspector will assess. You will see a target whose name begins with InspectorTarget . Click on the arrow widget to open the target and display the details. You should see something similar to the image below. In the figure above, notice that the Use Tags section contains a key/value pair with the entries aws:cloudformation:stack-name and pww respectively. This Inspector target is configured to select all instances that were started by the CloudFormation stack. Click the Preview Target button. A new window opens as shown below. You now see there are three Instances that Inspector will assess based on the configuration of the target. Click the Assessment Templates on the left menu. A list of assessment templates appears as shown below. You will see an assement template whose name begins with AssessmentTemplate . Assessment templates represent the selection of a target and one or more rules packages. A rules package is a collection of rules that represent security checks. This template assesses the previously mentioned target against the following two rules packages: Common Vulnerabilities and Exposures: The rules in this package help verify whether the EC2 instances in your assessment targets are exposed to common vulnerabilities and exposures (CVEs). Attacks can exploit unpatched vulnerabilities to compromise the confidentiality, integrity, or availability of your service or data. The CVE system provides a reference method for publicly known information security vulnerabilities and exposures. For more information, see https://cve.mitre.org/ {target=_blank}. You typically remediate findings from this rules package by installing patches. Security Best Practices: The rules in this package help determine whether your systems are configured securely. For example, one rule in this package checks to see if root login has been disabled over ssh. You typically remediate the findings by adjusting configuration settings. On the Amazon Inspector menu, click Assessment runs . You should see an entry for the assesment that was started on your behalf. If the status is not, Analysis complete, then periodically refresh the screen until the status changes to Analysis complete as shown in the figure below. On the line that represents your most recent run, make note of the number in the Findings column (177 in this diagram). After you perform the remediation later in this workshop, that number should decrease. Click on the number in the Findings column. The findings associated with the run will appear as shown below. You will see one of the findings has been expanded to reveal more details. The middle section of the finding has been removed to save space. Now that you have learned about Inspector assessments, you are ready to perform some remediation. You will then run an Inspector assessment yourself to see if the number of findings has changed. Click here to proceed to the Remediate Phase.","title":"Understanding Amazon Inspector targets"},{"location":"workshop/host-layer/contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing Guidelines"},{"location":"workshop/host-layer/contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"workshop/host-layer/contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"workshop/host-layer/contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"workshop/host-layer/contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"workshop/host-layer/contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"workshop/host-layer/contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"workshop/host-layer/contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"workshop/host-layer/getting-started/","text":"Getting Started Create an AWS account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . Create a Cloud9 instance (optional) If the workshop you are doing requires you to run commands or scripts you will need to launch a an AWS Cloud9 instance which will provide you with a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. The workshop instructions will specify if this needed. Below are the instructions for launching an instance: Browse to the AWS Cloud9 console. Click Create environment on the right side. Enter a Name (security-workshop-ide) and click Next step . Leave all the defaults and click Next step . Click Create environment . The environment will open automatically after it has been provisioned. Browse back to the AWS Cloud9 console and you can click Open IDE on the environment you created to access it at anytime. You are now setup for the workshops!","title":"Getting Started"},{"location":"workshop/host-layer/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"workshop/host-layer/getting-started/#create-an-aws-account","text":"In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for.","title":"Create an AWS account"},{"location":"workshop/host-layer/getting-started/#create-an-admin-user","text":"If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created.","title":"Create an admin user"},{"location":"workshop/host-layer/getting-started/#add-credits-optional","text":"If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem .","title":"Add credits (optional)"},{"location":"workshop/host-layer/getting-started/#create-a-cloud9-instance-optional","text":"If the workshop you are doing requires you to run commands or scripts you will need to launch a an AWS Cloud9 instance which will provide you with a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. The workshop instructions will specify if this needed. Below are the instructions for launching an instance: Browse to the AWS Cloud9 console. Click Create environment on the right side. Enter a Name (security-workshop-ide) and click Next step . Leave all the defaults and click Next step . Click Create environment . The environment will open automatically after it has been provisioned. Browse back to the AWS Cloud9 console and you can click Open IDE on the environment you created to access it at anytime. You are now setup for the workshops!","title":"Create a Cloud9 instance (optional)"},{"location":"workshop/host-layer/license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"workshop/host-layer/license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"workshop/host-layer/remediate/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Remediate Phase In the previous Assess Phase, you installed Amazon Inspector on the instances that were launched as a result of the CloudFormation stack. You will now use AWS Systems Manager Patch Manager to apply patches. You will use tags to select the instances as well. In this section you will do the following tasks: Use AWS Systems Manager Patch Manager to set up patching Use AWS Systems Manager Run Command to check the status of the patching Use AWS Systems Manager Patch Manager Go to the Systems Manager console and select Patch Manager. If you see the Patch Manager home screen, then click the View predefined patch baselines link as shown below: You will now see a list of default patch baselines that are used to patch each operating system supported by Patch Manager. The default patch baseline only patches major security issues. You are going to crate a new Amazon Linux 2 patch baseline that will patch more things and make this new patch baseline the default. Click Create patch baseline . In the Name field, enter a name to give the new baseline such as pww . In the Operating system field, select Amazon Linux 2 . In the Approval rules section, check the box under Include non-security updates . IMPORTANT NOTE: Depending on the size of the screen, the box may not align with the title Include non-security updates . See the figure below. Click the Create patch baseline button at the bottom of the screen. You should now see the new patch baseline in the list of baselines. You may need to refresh the browser window to see it. This new patch baseline includes non-security patches. Note at the end of the line representing the newly created patch baseline you will see No in the Default Baseline column as shown in the figure below. Click the radio button on the line with the newly created patch baseline. From the Actions menu at the top select Set default patch baseline . You will be asked to confirm this. You have just set the default patch baseline for Amazon Linux 2 to use the patch baseline you just created that includes non-security patches. You should now see Yes at the end of the patch baseline as shown below. Click Configure patching . In the Configure patching screen, go to the Instances to patch section and click the Enter instance tags radio button. In the Instance tags field, enter aws:cloudformation:stack-name into the Tag key field. In the Tag value field, enter the stack name that you created earlier (pww, following the example in this documentation). Click Add . In the Patching schedule section, click the Skip scheduling and patch instances now radio button. In the Patching operation section, click the Scan and install radio button if it is not already selected. Your screen should look similar to the image below. Click the Configure patching button at the bottom of the window. You will see a message at the top of your screen saying that Patch Manager will use Run Command to patch the instances. Run Command is another feature of AWS Systems Manager that runs a command across multiple Amazon EC2 instances. Patch Manager builds the commands necessary to perform the patching and is using Run Command to actually execute the commands. Check the patching status You are now going to examine the status of the patching operation by using AWS Systems Manager Run Command. Go to the AWS Systems Manager Console and click Run Command on the left menu. If the patching is still running, you will see the entry in the Commands tab. Wait for the command to finish. Refresh the screen if necessary to update the display. Once the command has finished, click on Command history . Look for the line containing the document name AWS-RunPatchBaseline . That represents the Patch Manager activity.Your screen should look similar to the image below. Click on the Command ID link to see more details about the command. You will see a line for each target with a link referencing the Instance ID. If you then click on the Instance ID , you will see each step of the command that is executed. Note that some steps are skipped because they do not apply to the operating system of the instance. Also, you only see the first part of the command output. If you want to see all of the output you can configure Systems Manager to direct the output into an Amazon S3 bucket. You have now completed the patching operation. In the Verify Phase, you will re-assess the environment with Amazon Inspector. Click here to proceed to the Verify Phase.","title":"Remediate Phase"},{"location":"workshop/host-layer/remediate/#identifying-and-remediating-host-vulnerabilities-host-layer-round-remediate-phase","text":"In the previous Assess Phase, you installed Amazon Inspector on the instances that were launched as a result of the CloudFormation stack. You will now use AWS Systems Manager Patch Manager to apply patches. You will use tags to select the instances as well. In this section you will do the following tasks: Use AWS Systems Manager Patch Manager to set up patching Use AWS Systems Manager Run Command to check the status of the patching","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Remediate Phase"},{"location":"workshop/host-layer/remediate/#use-aws-systems-manager-patch-manager","text":"Go to the Systems Manager console and select Patch Manager. If you see the Patch Manager home screen, then click the View predefined patch baselines link as shown below: You will now see a list of default patch baselines that are used to patch each operating system supported by Patch Manager. The default patch baseline only patches major security issues. You are going to crate a new Amazon Linux 2 patch baseline that will patch more things and make this new patch baseline the default. Click Create patch baseline . In the Name field, enter a name to give the new baseline such as pww . In the Operating system field, select Amazon Linux 2 . In the Approval rules section, check the box under Include non-security updates . IMPORTANT NOTE: Depending on the size of the screen, the box may not align with the title Include non-security updates . See the figure below. Click the Create patch baseline button at the bottom of the screen. You should now see the new patch baseline in the list of baselines. You may need to refresh the browser window to see it. This new patch baseline includes non-security patches. Note at the end of the line representing the newly created patch baseline you will see No in the Default Baseline column as shown in the figure below. Click the radio button on the line with the newly created patch baseline. From the Actions menu at the top select Set default patch baseline . You will be asked to confirm this. You have just set the default patch baseline for Amazon Linux 2 to use the patch baseline you just created that includes non-security patches. You should now see Yes at the end of the patch baseline as shown below. Click Configure patching . In the Configure patching screen, go to the Instances to patch section and click the Enter instance tags radio button. In the Instance tags field, enter aws:cloudformation:stack-name into the Tag key field. In the Tag value field, enter the stack name that you created earlier (pww, following the example in this documentation). Click Add . In the Patching schedule section, click the Skip scheduling and patch instances now radio button. In the Patching operation section, click the Scan and install radio button if it is not already selected. Your screen should look similar to the image below. Click the Configure patching button at the bottom of the window. You will see a message at the top of your screen saying that Patch Manager will use Run Command to patch the instances. Run Command is another feature of AWS Systems Manager that runs a command across multiple Amazon EC2 instances. Patch Manager builds the commands necessary to perform the patching and is using Run Command to actually execute the commands.","title":"Use AWS Systems Manager Patch Manager"},{"location":"workshop/host-layer/remediate/#check-the-patching-status","text":"You are now going to examine the status of the patching operation by using AWS Systems Manager Run Command. Go to the AWS Systems Manager Console and click Run Command on the left menu. If the patching is still running, you will see the entry in the Commands tab. Wait for the command to finish. Refresh the screen if necessary to update the display. Once the command has finished, click on Command history . Look for the line containing the document name AWS-RunPatchBaseline . That represents the Patch Manager activity.Your screen should look similar to the image below. Click on the Command ID link to see more details about the command. You will see a line for each target with a link referencing the Instance ID. If you then click on the Instance ID , you will see each step of the command that is executed. Note that some steps are skipped because they do not apply to the operating system of the instance. Also, you only see the first part of the command output. If you want to see all of the output you can configure Systems Manager to direct the output into an Amazon S3 bucket. You have now completed the patching operation. In the Verify Phase, you will re-assess the environment with Amazon Inspector. Click here to proceed to the Verify Phase.","title":"Check the patching status"},{"location":"workshop/host-layer/verify/","text":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Verify Phase Now that you have remediated the environment, you will again use Amazon Inspector to assess the environment again to see how the patching affected the overall security posture of the environment. You will first run an Inspector assessment. While the assessment is running, you will explore some other AWS capabilities. Lastly, you will return to Inspector to see the results of the new assessment to the effects of the patching that you did with Systems Manager Patch Manager. Run another Inspector assessment Go to the Amazon Inspector console, click Assessment templates on the menu. Locate the template that you created during the Assess Phase and check the box at the left end of that row. Click Run . This will launch another assessment run. The assessment run will take 15 minutes to complete. Explore AWS Systems Manager Maintenance Windows While Inspector is running, you will learn about AWS Systems Manager Maintenance Windows. AWS Systems Manager Maintenance Windows let you define a schedule for things like patching an operating system. So, rather than applying patches once as you did earlier, you can set up a maintenance window to apply patches on an ongoing basis. Each maintenance window has a schedule (when the maintenace is to occur), a set of registered targets for the maintance (in this case, the Amazon EC2 instances that are part of this workshop), and a set of registered tasks (in this case, the patching operation). Create the maintenance window Go to the Systems Manager console window and select Maintenance Windows . Click Create maintance window . Use the values in the table below. You can leave all other defaults in place. Note the future start date of the window. This is done to avoid interfering with the Inspector scan that is currently running. Field name Field Value Type a name for the maintance window pww_mw Specify with Cron schedule builder Window starts Every 12 hours Duration 1 hour Stop initiating tasks 0 hours Window start date 12/01/2099 Schedule time zone Select your timezone Your screen should look similar to the figure below. Click Create maintenance window to save the maintenance window. Register the maintenance window target In the list of maintenance windows, click on the id of the window corresponding to the maintance window you just created. The link begins with a mw- prefix. Click the Actions button and select the Register targets menu item. Use the values in the table below. Leave all other fields at their default values. Field name Field Value Target name pww_targets Specify instance tags Select the radio button Tag key aws:cloudformation\\:stack-name Tag value the stack name (pww in this example) Make sure you click Add to add the tag. Your screen should look similar to the figure below. Click Register target to register the target to the maintenance window based on the information you entered. Register the maintannce window task Click Maintenance windows on the left menu. In the list of maintenance windows, click on the id of the window corresponding to the maintance window you just created. The link begins with a mw- prefix. Click the Actions button and select the Register Run command task menu item. Use the values in the table below. Leave all other fields at their defualt values. Field name Field Value Task name pww_task Command document AWS-RunPatchBaseline Target by Selecting registered target groups Concurrency 1 targets Error threshold 1 errors Service role option Use the service-linked role for Systems Manager Your screen should look similar to the figure below. Click Register Run command task to register the patching task to the maintenance window based on the information you entered. You have now completed the definition of a Systems Manager Maintenance Window. The purpose of this additional task is to show you how you could implement patching on an ongoing basis in your environment. Examine the results of the Inspector assessment Now that you have explored some addtional AWS capabilities, you will examine the results of the second Inspector assessment. Go to the Inspector console. Click Assessment runs and periodically refresh the screen. Wait until the status for the run changes to Analysis complete . The run will take approximately 15 minutes to complete. Compare the number of findings between the two runs. In most cases, there will be fewer findings in the newer run since patches have been applied. The change in the number findings may vary based on the age of the AMI used to launch the instances. Click the number of findings for the newest run (after the patches were installed). You will then see all of the findings that were not patched during the Remediate Phase. Take a look at the entries that were not patched. A common example of a finding is an instance is configured to allow users to log in with root credentials over SSH, without having to use a command authenticated by a public key. Why would Patch Manager not patch this or the other findings? Congratulations! You have now completed this workshop! Click here to proceed to the Cleanup Phase.","title":"Verify Phase"},{"location":"workshop/host-layer/verify/#identifying-and-remediating-host-vulnerabilities-host-layer-round-verify-phase","text":"Now that you have remediated the environment, you will again use Amazon Inspector to assess the environment again to see how the patching affected the overall security posture of the environment. You will first run an Inspector assessment. While the assessment is running, you will explore some other AWS capabilities. Lastly, you will return to Inspector to see the results of the new assessment to the effects of the patching that you did with Systems Manager Patch Manager.","title":"Identifying and Remediating Host Vulnerabilities - Host Layer Round - Verify Phase"},{"location":"workshop/host-layer/verify/#run-another-inspector-assessment","text":"Go to the Amazon Inspector console, click Assessment templates on the menu. Locate the template that you created during the Assess Phase and check the box at the left end of that row. Click Run . This will launch another assessment run. The assessment run will take 15 minutes to complete.","title":"Run another Inspector assessment"},{"location":"workshop/host-layer/verify/#explore-aws-systems-manager-maintenance-windows","text":"While Inspector is running, you will learn about AWS Systems Manager Maintenance Windows. AWS Systems Manager Maintenance Windows let you define a schedule for things like patching an operating system. So, rather than applying patches once as you did earlier, you can set up a maintenance window to apply patches on an ongoing basis. Each maintenance window has a schedule (when the maintenace is to occur), a set of registered targets for the maintance (in this case, the Amazon EC2 instances that are part of this workshop), and a set of registered tasks (in this case, the patching operation).","title":"Explore AWS Systems Manager Maintenance Windows"},{"location":"workshop/host-layer/verify/#create-the-maintenance-window","text":"Go to the Systems Manager console window and select Maintenance Windows . Click Create maintance window . Use the values in the table below. You can leave all other defaults in place. Note the future start date of the window. This is done to avoid interfering with the Inspector scan that is currently running. Field name Field Value Type a name for the maintance window pww_mw Specify with Cron schedule builder Window starts Every 12 hours Duration 1 hour Stop initiating tasks 0 hours Window start date 12/01/2099 Schedule time zone Select your timezone Your screen should look similar to the figure below. Click Create maintenance window to save the maintenance window.","title":"Create the maintenance window"},{"location":"workshop/host-layer/verify/#register-the-maintenance-window-target","text":"In the list of maintenance windows, click on the id of the window corresponding to the maintance window you just created. The link begins with a mw- prefix. Click the Actions button and select the Register targets menu item. Use the values in the table below. Leave all other fields at their default values. Field name Field Value Target name pww_targets Specify instance tags Select the radio button Tag key aws:cloudformation\\:stack-name Tag value the stack name (pww in this example) Make sure you click Add to add the tag. Your screen should look similar to the figure below. Click Register target to register the target to the maintenance window based on the information you entered.","title":"Register the maintenance window target"},{"location":"workshop/host-layer/verify/#register-the-maintannce-window-task","text":"Click Maintenance windows on the left menu. In the list of maintenance windows, click on the id of the window corresponding to the maintance window you just created. The link begins with a mw- prefix. Click the Actions button and select the Register Run command task menu item. Use the values in the table below. Leave all other fields at their defualt values. Field name Field Value Task name pww_task Command document AWS-RunPatchBaseline Target by Selecting registered target groups Concurrency 1 targets Error threshold 1 errors Service role option Use the service-linked role for Systems Manager Your screen should look similar to the figure below. Click Register Run command task to register the patching task to the maintenance window based on the information you entered. You have now completed the definition of a Systems Manager Maintenance Window. The purpose of this additional task is to show you how you could implement patching on an ongoing basis in your environment.","title":"Register the maintannce window task"},{"location":"workshop/host-layer/verify/#examine-the-results-of-the-inspector-assessment","text":"Now that you have explored some addtional AWS capabilities, you will examine the results of the second Inspector assessment. Go to the Inspector console. Click Assessment runs and periodically refresh the screen. Wait until the status for the run changes to Analysis complete . The run will take approximately 15 minutes to complete. Compare the number of findings between the two runs. In most cases, there will be fewer findings in the newer run since patches have been applied. The change in the number findings may vary based on the age of the AMI used to launch the instances. Click the number of findings for the newest run (after the patches were installed). You will then see all of the findings that were not patched during the Remediate Phase. Take a look at the entries that were not patched. A common example of a finding is an instance is configured to allow users to log in with root credentials over SSH, without having to use a command authenticated by a public key. Why would Patch Manager not patch this or the other findings? Congratulations! You have now completed this workshop! Click here to proceed to the Cleanup Phase.","title":"Examine the results of the Inspector assessment"},{"location":"workshop/perimeter-layer/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF For your initial task, you will configure AWS WAF to protect your site from common attacks such as SQL injection and cross site scripting. AWS WAF is a web application firewall that helps protect your web applications from common web exploits that could affect application availability, compromise security or consume excessive resources. Phases in the Perimeter Layer round To begin the module, proceed to the Assess phase below. Assess Remediate Verify","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF"},{"location":"workshop/perimeter-layer/#mitigating-common-web-application-attack-vectors-using-aws-waf","text":"For your initial task, you will configure AWS WAF to protect your site from common attacks such as SQL injection and cross site scripting. AWS WAF is a web application firewall that helps protect your web applications from common web exploits that could affect application availability, compromise security or consume excessive resources.","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF"},{"location":"workshop/perimeter-layer/#phases-in-the-perimeter-layer-round","text":"To begin the module, proceed to the Assess phase below. Assess Remediate Verify","title":"Phases in the Perimeter Layer round"},{"location":"workshop/perimeter-layer/assess/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Assess Phase In the previous Build Phase, you built a CloudFormation stack that contains a PHP website on Amazon EC2 instances behind an application load balancer. You are now going to assess the posture of the site and then add an AWS WAF Web ACL to your site. In this section you will do the following tasks: Identify the stack you built Look up the output values for your environment and test access Use your Red Team Host to test for website vulnerabilities Identify the stack that you built Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later. Look up the Stack Outputs Go to the stack outputs and look for the website URL stored in the albEndpoint output value. Test access to the site by right clicking and opening in a new tab. Note the URL for your site as this will be used throughout this workshop round. For an AWS sponsored event, while in the stack outputs, note the ScannerUID value. This Id value will be used to identify the posture of your site within the automated scanner and the associated dashboard . While still in stack outputs, right click the link in RedTeamHostSession and open in new tab. This will launch an AWS Systems Manager Session Manager to the host you will use to perform manual scans against your site URL. AWS Systems Manager Session Manager Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon EC2 instances through an interactive one-click browser-based shell or through the AWS CLI. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys. Website Scanning Environment and Tools In order to test your AWS WAF ruleset, this lab has been configured with two scanning capabilities; a Red Team Host where you can invoke manual scanning and an automated scanner which runs from outside your lab environment. The scanner performs 10 basic tests designed to help simulate and mitigate common web attack vectors. Canary GET - Should not be blocked Canary POST - Should not be blocked SQL Injection (SQLi) in Query String SQL Injection (SQLi) in Cookie Cross Site Scripting (XSS) in Query String Cross Site Scripting (XSS) in Body Inclusion in Modules Cross Site Request Forgery (CSRF) Token Missing Cross Site Request Forgery (CSRF) Token Invalid Path Traversal Workshop Architecture Note about Tests These basic tests are designed to provide common examples you can use to test AWS WAF functionality. You should perform thorough analysis and testing when implementing rules into your production environments. Website Scanning Environment and Tools - Manual Scanning Once you have started a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint The scanner.py script will run each of the tests above and report back the following information: Request : The HTTP request command used. Test Name : The name of the test from list above. Result : The HTTP status code returned. The logic in the scanner script color codes the response as follows: Green : 403 - Forbidden ( Except for canary GET and POST tests. ) Red : 200 - OK Blue : 404 - Not Found Yellow : 500 - Internal Server Error What are the results of running the scanner script? Were the simulated malicious requests blocked? As you can see by running the script there are several vulnerabilities that need to be addressed. In the remediate phase you will configure an AWS WAF Web ACL to block these requests. When AWS WAF blocks a web request based on the conditions that you specify, it returns HTTP status code 403 (Forbidden). For a full view of the request and response information, you can paste the Request command directly into the console and add the --debug argument. Note about Testing Tool The scanner.py script uses an open source HTTP client called httpie . HTTPie\u2014aitch-tee-tee-pie\u2014is a command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more. Website Scanning Environment and Tools - Automated Scanning For an AWS sponsored event, in addition to the manual scanning, automated scanning is also performed against your lab website. The automated tests are similar to the manual tests but the results are posted to a centralized scanning results dashboard along with the other workshop participants. You can identify the scanning results for your site using the Unique Id found in the CloudFormation outputs. You can now proceed to the Remediate Phase .","title":"Assess Phase"},{"location":"workshop/perimeter-layer/assess/#mitigating-common-web-application-attack-vectors-using-aws-waf-assess-phase","text":"In the previous Build Phase, you built a CloudFormation stack that contains a PHP website on Amazon EC2 instances behind an application load balancer. You are now going to assess the posture of the site and then add an AWS WAF Web ACL to your site. In this section you will do the following tasks: Identify the stack you built Look up the output values for your environment and test access Use your Red Team Host to test for website vulnerabilities","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Assess Phase"},{"location":"workshop/perimeter-layer/assess/#identify-the-stack-that-you-built","text":"Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later.","title":"Identify the stack that you built"},{"location":"workshop/perimeter-layer/assess/#look-up-the-stack-outputs","text":"Go to the stack outputs and look for the website URL stored in the albEndpoint output value. Test access to the site by right clicking and opening in a new tab. Note the URL for your site as this will be used throughout this workshop round. For an AWS sponsored event, while in the stack outputs, note the ScannerUID value. This Id value will be used to identify the posture of your site within the automated scanner and the associated dashboard . While still in stack outputs, right click the link in RedTeamHostSession and open in new tab. This will launch an AWS Systems Manager Session Manager to the host you will use to perform manual scans against your site URL. AWS Systems Manager Session Manager Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon EC2 instances through an interactive one-click browser-based shell or through the AWS CLI. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys.","title":"Look up the Stack Outputs"},{"location":"workshop/perimeter-layer/assess/#website-scanning-environment-and-tools","text":"In order to test your AWS WAF ruleset, this lab has been configured with two scanning capabilities; a Red Team Host where you can invoke manual scanning and an automated scanner which runs from outside your lab environment. The scanner performs 10 basic tests designed to help simulate and mitigate common web attack vectors. Canary GET - Should not be blocked Canary POST - Should not be blocked SQL Injection (SQLi) in Query String SQL Injection (SQLi) in Cookie Cross Site Scripting (XSS) in Query String Cross Site Scripting (XSS) in Body Inclusion in Modules Cross Site Request Forgery (CSRF) Token Missing Cross Site Request Forgery (CSRF) Token Invalid Path Traversal Workshop Architecture Note about Tests These basic tests are designed to provide common examples you can use to test AWS WAF functionality. You should perform thorough analysis and testing when implementing rules into your production environments.","title":"Website Scanning Environment and Tools"},{"location":"workshop/perimeter-layer/assess/#website-scanning-environment-and-tools-manual-scanning","text":"Once you have started a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint The scanner.py script will run each of the tests above and report back the following information: Request : The HTTP request command used. Test Name : The name of the test from list above. Result : The HTTP status code returned. The logic in the scanner script color codes the response as follows: Green : 403 - Forbidden ( Except for canary GET and POST tests. ) Red : 200 - OK Blue : 404 - Not Found Yellow : 500 - Internal Server Error What are the results of running the scanner script? Were the simulated malicious requests blocked? As you can see by running the script there are several vulnerabilities that need to be addressed. In the remediate phase you will configure an AWS WAF Web ACL to block these requests. When AWS WAF blocks a web request based on the conditions that you specify, it returns HTTP status code 403 (Forbidden). For a full view of the request and response information, you can paste the Request command directly into the console and add the --debug argument. Note about Testing Tool The scanner.py script uses an open source HTTP client called httpie . HTTPie\u2014aitch-tee-tee-pie\u2014is a command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more.","title":"Website Scanning Environment and Tools - Manual Scanning"},{"location":"workshop/perimeter-layer/assess/#website-scanning-environment-and-tools-automated-scanning","text":"For an AWS sponsored event, in addition to the manual scanning, automated scanning is also performed against your lab website. The automated tests are similar to the manual tests but the results are posted to a centralized scanning results dashboard along with the other workshop participants. You can identify the scanning results for your site using the Unique Id found in the CloudFormation outputs. You can now proceed to the Remediate Phase .","title":"Website Scanning Environment and Tools - Automated Scanning"},{"location":"workshop/perimeter-layer/getting-started/","text":"Getting Started Click here if you're at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Go to the CloudFormation console. Click here to proceed to the Assess phase. Click here if you're not at an AWS event or are using your own account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshop!","title":"Getting Started"},{"location":"workshop/perimeter-layer/getting-started/#getting-started","text":"Click here if you're at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Go to the CloudFormation console. Click here to proceed to the Assess phase. Click here if you're not at an AWS event or are using your own account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console.","title":"Getting Started"},{"location":"workshop/perimeter-layer/getting-started/#create-an-admin-user","text":"If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created.","title":"Create an admin user"},{"location":"workshop/perimeter-layer/getting-started/#add-credits-optional","text":"If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshop!","title":"Add credits (optional)"},{"location":"workshop/perimeter-layer/remediate/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Remediate Phase In the previous Build Phase, you identified several vulnerabilities in your web application. You are now going to design and implement an AWS WAF ruleset to help mitigate these vulnerabilities. In this section you will do the following tasks: Identify the WAF ACL for your site AWS WAF Rule design and considerations Console Walkthrough - Creating a WAF Condition and Rule WAF Rule Creation and Solutions Identify the WAF ACL for your Site If needed, go to https://console.aws.amazon.com/console/home . You will be redirected to the AWS Management Console dashboard on successful login: Make sure you select the appropriate AWS Region when working in the AWS Management Console (top right corner, on the menu bar). From the Management Console dashboard, navigate to the AWS WAF & Shield service console. You can do that several ways: Type \u201cwaf\u201d in the AWS services panel search box and select the resulting option Expand the Services drop down menu (top left on the menu bar) and choose WAF & Shield Expand the All services area of the AWS services panel and choose WAF & Shield Once selected, you will be redirected to the AWS WAF & AWS Shield service console. You may see an initial landing page at first. Choose Go to AWS WAF: 3. In the side bar menu on the left, pick the Web ACLs option under the AWS WAF heading. If the list of Web ACLs appears empty select the correct AWS Region as indicated on your credentials card in the Filter dropdown. If you are sharing the same account with other participants you can identify your WAF ACL by the Id in the stack outputs. 4. Click on the WAF Web ACL Name to select the existing Web ACL. Once the detail pane is loaded on the left of your screen, you will see three tabs: Requests, Rules, and Logging. Toggle to Rules: Validate that you are able to see a pre-existing rule, configured to block requests, and that your Web ACL is associated with an Application load balancer resource. You can drill down further into the properties of the existing rule, by clicking on the rule name. You should see 2 entries into the associated IP address list for the loopback/localhost IP addresses (127.0.0.0/8, ::1/128). Viewing Sampled requests In the Requests tab, you can view a sample of the requests that have been inspected by the WAF. For each sampled request, you can view detailed data about the request, such as the originating IP address and the headers included in the request. You also can view which rule the request matched, and whether the rule is configured to allow or block requests. You can refer to the sampled requests throughout this exercise to monitor activity and look for suspicious activity. AWS WAF Rule Design and Considerations Basics AWS WAF rules consist of conditions. Conditions are lists of specific filters (patterns) that are being matched against the HTTP request components processed by AWS WAF. The filters, including their attributes, are specific to the type of condition supported by AWS WAF. A condition, as a whole, is considered as matched , if any one of the listed filters is matched. Rules contain one or more conditions. Each condition attached to a rule is called a predicate. Predicates are evaluated using Boolean logic. A predicate is evaluated as matched or not matched (negated predicted), and multiple predicates are evaluated using Boolean AND \u2013 all predicates must match for the rule action to be triggered. Web ACLs are ordered lists of rules. They are evaluated in order for each HTTP request and the action of the first matching rule is taken by the WAF engine, whether that is to allow, block or count the request. If no rule matches, the default action of the web ACL prevails. Note About Conditions and Rules Conditions and rules are reusable resources within the region in which they are created. You should consider the effects of changes to WAF conditions and rules in your organizations change control procedures. Note About This Section In order to illustrate the process of creating WAF conditions and rules, we will walk through the creation of the first rule in your WAF ACL. The complete list of threats and solutions is available in the WAF Rule Creation and Solutions section. Rule Design Considerations: To create a rule, you have to create the relevant match conditions first. This process requires planning for effective rule building. Use the following guiding questions: What is the intended purpose of the rule? What HTTP request components apply to the purpose of the rule? Do you already have conditions targeting those request components that you can reuse? Is that desirable? How can you define the purpose of the rule in a Boolean logic expression? What conditions do you need to create to implement the logic? Are any transformations relevant to my input content type? AWS WAF Concepts: The following illustration shows AWS WAF Conditions, Rules and Web ACL's. The following illustration shows how AWS WAF checks the rules and performs the actions based on those rules. Example Rule Design and Creation: As an example, lets say we want to build a rule to detect and block SQL Injection in received in query strings. Let\u2019s see how these questions help us plan the implementation of the rule. This walkthrough will get you started with the ruleset required to mitigate the simulated threats in the workshop. It's purpose is to help you better understand the rule creation process. You will create the remaining rules from solution hints provided below. Sample Rule purpose: Detect SQL Injection in query string, use \u2018block\u2019 action in Web ACL HTTP request components: Request Method \u2013 form input typically gets submitted using a GET HTTP request method Query String \u2013 the SQL injection attempt is located in the query string Define the purpose of the rule using Boolean logic: If Query String contains suspected SQL Injection then block Sample Rule - Conditions to implement: SQL injection Match Condition targeting the request Query string Relevant transformations: SQL Injection Match Condition query string is URL encoded, so we will apply the URL_DECODE transformation. Rules to implement: Rule with 1 predicate matching SQL injection condition Console Walkthrough - Creating a Condition and Rule In the AWS WAF console, create a SQL injection condition by selecting SQL injection matching from the side-bar menu to the left of the console, under the Conditions heading. Click on Create Condition : 3. Provide filterSQLi for the Name and select the region where you deployed the stack. Add a filter (pattern) to the condition. Set the Part of the request to filter on to Query string and set the Transformation to URL decode . Click Add filter and then click Create . 4. With the condition created, and any additional conditions created based on need as well, you are ready to create a rule. In the AWS WAF console, select Rules from the side-bar menu to the left of the console, under the AWS WAF heading. 5. Click on Create Rule : 6. Provide matchSQLi for the name, metric name and sect the region where you deployed the stack. Set the rule type to Regular rule . 7. Add a condition to the rule. For our rule example, choose \u201cWhen a request\u201d does (no negation) match at least one of the filters in the SQL injection match condition . Choose the SQL injection condition you have previously created. 8. Click Add Condition and click Create at the bottom of the screen. 9. Follow the steps in the Identify the WAF ACL for your site section above to go back to the Rules tab of your web ACL. 10. Click Edit web ACL . 11. In the Rules dropdown, select your rule, and click Add rule to web ACL . 12. Reorder the rules as appropriate for your use case. 13. Click Update to persist the changes. Additional Resources For a more comprehensive discussion of common vulnerabilities for web applications, as well as how to mitigate them using AWS WAF, and other AWS services, please refer to the Use AWS WAF to Mitigate OWASP\u2019s Top 10 Web Application Vulnerabilities whitepaper . WAF Rule Creation and Solutions In this phase, we will have a set of 6 exercises walking you through the process of building a basic mitigation rule set for common vulnerabilities. We will build these rules from scratch, so you can gain familiarity with the AWS WAF programming model and you can then write rules specific to your applications. Note About Exercise Solutions For the exercises below, you will find the high level description and solution configuration for your web ACL. You can test your ACL ruleset at any time using the Red Team Host. For AWS sponsored event, you can also view test results on the WAF Lab Dashboard . 1. SQL Injection & Cross Site Scripting Mitigation Use the SQL injection, cross-site scripting, as well as string and regex matching conditions to build rules that mitigate injection attacks and cross site scripting attacks. Consider the following: - How does your web application accept end-user input (whether directly or indirectly). Which HTTP request components does that input get inserted into? - What kind of content encoding considerations do you need to factor in for the input format? - What considerations do you need to account for in regards to false positives? For example, does your application legitimately need to accept SQL statements as input? How do the requirements derived from the above questions affect your solution? Solution update the SQL injection condition named filterSQLi with 2 additional filters query_string, url decode You should have created this filter in the walk through above body, html decode header, cookie, url decode View the existing matchSQLi rule to confirm additional filters create Cross-site scripting condition named filterXSS with 4 filters query_string, url decode body, html decode body, url decode header, cookie, url decode create a String and regex matching String match condition named filterXSSPathException with 1 filter. This demonstrates how to add an exception for the XSS rule uri, starts with, no transform, /reportBuilder/Editor.aspx create a rule named matchXSS type regular does match XSS condition: filterXSS does not match string match condition: filterXSSPathException add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked 2. Enforce Request Hygiene Use the string and regex matching, size constraints and IP address match conditions to build rules that block non-conforming or low value HTTP requests. Consider the following: \u2022 Are there limits to the size of the various HTTP request components relevant to your web application? For example, does your application ever use URIs that are longer than 100 characters in size? \u2022 Are there specific HTTP request components without which your application cannot operate effectively (e.g. CSRF token header, authorization header, referrer header)? Build rules that ensure the requests your application ends up processing are valid, conforming and valuable. Solution create String and regex matching String match type condition named filterFormProcessor with 1 filter uri, starts with, no transform, /form.php create string match condition named filterPOSTMethod with 1 filter uri, exactly matches, no transform, /form.php create String and regex matching Regex match condition named filterCSRFToken with 1 filter header x-csrf-token ( type in manually ), url decode, create regex pattern set named csrf , matches pattern: ^[0-9a-f]{40}$ create rule named matchCSRF type regular does match string condition: filterFormProcessor does match string condition: filterPOSTMethod does not match regex match condition: filterCSRFToken add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked 3. Mitigate File Inclusion & Path Traversal Use the string and regex matching conditions to build rules that block specific patterns indicative of unwanted path traversal or file inclusion. Consider the following: Can end users browse the directory structure of your web folders? Do you have directory indexes enabled? Is your application (or any dependency components) use input parameters in filesystem or remote URL references? Do you adequately lock down access so input paths cannot be manipulated? What considerations do you need to account for in regards to false positives (directory traversal signature patterns)? Build rules that ensure the relevant HTTP request components used for input into paths do not contain known path traversal patterns. Solution create a String and regex matching String match type condition named filterTraversal with 3 filters uri, starts with, url_decode, /include query_string, contains, url_decode, ../ query_string, contains, url_decode, :// create rule named matchTraversal type regular does match string condition: filterTraversal add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked Note About Remaining Exercises The remaining exercises below are optional. You should proceed to the Verify Phase and come back to the content below if time permits. 4. Limit Attack Footprint (Optional) Use the string and regex matching conditions along with geo match and IP address match conditions to build rules that limit the attack footprint against the exposed components of your application. Consider the following: \u2022 Does your web application have server-side include components in the public web path? \u2022 Does your web application have components at exposed paths that are not used (or dependencies have such functions)? \u2022 Do you have administrative, management, status or health check paths and components that aren\u2019t meant for end user access? You should consider blocking access to such elements, or limiting access to known sources, either whitelisted IP addresses or geographic locations. Solution create Geo match condition named filterAffiliates with 1 filter add country US, and RO create String and regex matching String match type condition named filterAdminUI with 1 filter uri, starts with, no transform, /admin create rule named matchAdminNotAffiliate type regular does match string condition: filterAdminUI does not match geo condition: filterAffiliates add rule to Web ACL 5. Detect & Mitigate Anomalies (Optional) What constitutes an anomaly in regards to your web application? A few common anomaly patterns are: Unusually elevated volume of requests in general Unusually elevated volumes of requests to specific URI paths Unusually elevated levels of requests generating specific non-HTTP status 200 responses Unusually elevated volumes from certain sources (IPs, geographies) Usual request signatures (referrers, user agent strings, content types, etc) Do you have mechanisms in place to detect such patterns? If so, can you build rules to mitigate them? Solution create String and regex match condition named filterLoginProcessor with 1 filter uri, starts with, no transform, /login.php create rule named matchRateLogin type rate-based, 2000 does match string condition: filterLoginProcessor does match string condition: filterPOSTMethod add rules to Web ACL 6. Reputation Lists, Nuisance Requests (Optional) Reputation lists (whitelists or blacklists) are a good way to filter and stop servicing low value requests. This can reduce operating costs, and reduce exposure to attack vectors. Reputation lists can be self-maintained: lists of identifiable actors that you have determined are undesired. They can be identified any number of ways: the source IP address the user agent string reuse of hijacked authorization or session tokens, attempting to make requests to paths that clearly do not exist in your application but are well known vulnerable software packages (probing) Build blacklists of such actors using the relevant conditions and set up rules to match and block them. An example IP-based blacklist already exists in your sandbox environment. Reputation lists can also be maintained by third parties. The AWS WAF Security Automations allow you to implement IP-based reputation lists. Solution edit the IP addresses condition named WafIpBlackList add a test IP address You can obtain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. create a String and regex matching String match condition named filterNoPath with 1 filter uri, starts with, no transform, /phpmyadmin Use the concepts you learned in the previous exercises to add the filterNoPath condition to your Web ACL. You can now proceed to the Verify Phase .","title":"Remediate Phase"},{"location":"workshop/perimeter-layer/remediate/#mitigating-common-web-application-attack-vectors-using-aws-waf-remediate-phase","text":"In the previous Build Phase, you identified several vulnerabilities in your web application. You are now going to design and implement an AWS WAF ruleset to help mitigate these vulnerabilities. In this section you will do the following tasks: Identify the WAF ACL for your site AWS WAF Rule design and considerations Console Walkthrough - Creating a WAF Condition and Rule WAF Rule Creation and Solutions","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Remediate Phase"},{"location":"workshop/perimeter-layer/remediate/#identify-the-waf-acl-for-your-site","text":"If needed, go to https://console.aws.amazon.com/console/home . You will be redirected to the AWS Management Console dashboard on successful login: Make sure you select the appropriate AWS Region when working in the AWS Management Console (top right corner, on the menu bar). From the Management Console dashboard, navigate to the AWS WAF & Shield service console. You can do that several ways: Type \u201cwaf\u201d in the AWS services panel search box and select the resulting option Expand the Services drop down menu (top left on the menu bar) and choose WAF & Shield Expand the All services area of the AWS services panel and choose WAF & Shield Once selected, you will be redirected to the AWS WAF & AWS Shield service console. You may see an initial landing page at first. Choose Go to AWS WAF: 3. In the side bar menu on the left, pick the Web ACLs option under the AWS WAF heading. If the list of Web ACLs appears empty select the correct AWS Region as indicated on your credentials card in the Filter dropdown. If you are sharing the same account with other participants you can identify your WAF ACL by the Id in the stack outputs. 4. Click on the WAF Web ACL Name to select the existing Web ACL. Once the detail pane is loaded on the left of your screen, you will see three tabs: Requests, Rules, and Logging. Toggle to Rules: Validate that you are able to see a pre-existing rule, configured to block requests, and that your Web ACL is associated with an Application load balancer resource. You can drill down further into the properties of the existing rule, by clicking on the rule name. You should see 2 entries into the associated IP address list for the loopback/localhost IP addresses (127.0.0.0/8, ::1/128). Viewing Sampled requests In the Requests tab, you can view a sample of the requests that have been inspected by the WAF. For each sampled request, you can view detailed data about the request, such as the originating IP address and the headers included in the request. You also can view which rule the request matched, and whether the rule is configured to allow or block requests. You can refer to the sampled requests throughout this exercise to monitor activity and look for suspicious activity.","title":"Identify the WAF ACL for your Site"},{"location":"workshop/perimeter-layer/remediate/#aws-waf-rule-design-and-considerations","text":"","title":"AWS WAF Rule Design and Considerations"},{"location":"workshop/perimeter-layer/remediate/#basics","text":"AWS WAF rules consist of conditions. Conditions are lists of specific filters (patterns) that are being matched against the HTTP request components processed by AWS WAF. The filters, including their attributes, are specific to the type of condition supported by AWS WAF. A condition, as a whole, is considered as matched , if any one of the listed filters is matched. Rules contain one or more conditions. Each condition attached to a rule is called a predicate. Predicates are evaluated using Boolean logic. A predicate is evaluated as matched or not matched (negated predicted), and multiple predicates are evaluated using Boolean AND \u2013 all predicates must match for the rule action to be triggered. Web ACLs are ordered lists of rules. They are evaluated in order for each HTTP request and the action of the first matching rule is taken by the WAF engine, whether that is to allow, block or count the request. If no rule matches, the default action of the web ACL prevails. Note About Conditions and Rules Conditions and rules are reusable resources within the region in which they are created. You should consider the effects of changes to WAF conditions and rules in your organizations change control procedures. Note About This Section In order to illustrate the process of creating WAF conditions and rules, we will walk through the creation of the first rule in your WAF ACL. The complete list of threats and solutions is available in the WAF Rule Creation and Solutions section.","title":"Basics"},{"location":"workshop/perimeter-layer/remediate/#rule-design-considerations","text":"To create a rule, you have to create the relevant match conditions first. This process requires planning for effective rule building. Use the following guiding questions: What is the intended purpose of the rule? What HTTP request components apply to the purpose of the rule? Do you already have conditions targeting those request components that you can reuse? Is that desirable? How can you define the purpose of the rule in a Boolean logic expression? What conditions do you need to create to implement the logic? Are any transformations relevant to my input content type?","title":"Rule Design Considerations:"},{"location":"workshop/perimeter-layer/remediate/#aws-waf-concepts","text":"The following illustration shows AWS WAF Conditions, Rules and Web ACL's. The following illustration shows how AWS WAF checks the rules and performs the actions based on those rules.","title":"AWS WAF Concepts:"},{"location":"workshop/perimeter-layer/remediate/#example-rule-design-and-creation","text":"As an example, lets say we want to build a rule to detect and block SQL Injection in received in query strings. Let\u2019s see how these questions help us plan the implementation of the rule. This walkthrough will get you started with the ruleset required to mitigate the simulated threats in the workshop. It's purpose is to help you better understand the rule creation process. You will create the remaining rules from solution hints provided below.","title":"Example Rule Design and Creation:"},{"location":"workshop/perimeter-layer/remediate/#sample-rule-purpose","text":"Detect SQL Injection in query string, use \u2018block\u2019 action in Web ACL","title":"Sample Rule purpose:"},{"location":"workshop/perimeter-layer/remediate/#http-request-components","text":"Request Method \u2013 form input typically gets submitted using a GET HTTP request method Query String \u2013 the SQL injection attempt is located in the query string","title":"HTTP request components:"},{"location":"workshop/perimeter-layer/remediate/#define-the-purpose-of-the-rule-using-boolean-logic","text":"If Query String contains suspected SQL Injection then block","title":"Define the purpose of the rule using Boolean logic:"},{"location":"workshop/perimeter-layer/remediate/#sample-rule-conditions-to-implement","text":"SQL injection Match Condition targeting the request Query string","title":"Sample Rule - Conditions to implement:"},{"location":"workshop/perimeter-layer/remediate/#relevant-transformations","text":"SQL Injection Match Condition query string is URL encoded, so we will apply the URL_DECODE transformation.","title":"Relevant transformations:"},{"location":"workshop/perimeter-layer/remediate/#rules-to-implement","text":"Rule with 1 predicate matching SQL injection condition","title":"Rules to implement:"},{"location":"workshop/perimeter-layer/remediate/#console-walkthrough-creating-a-condition-and-rule","text":"In the AWS WAF console, create a SQL injection condition by selecting SQL injection matching from the side-bar menu to the left of the console, under the Conditions heading. Click on Create Condition : 3. Provide filterSQLi for the Name and select the region where you deployed the stack. Add a filter (pattern) to the condition. Set the Part of the request to filter on to Query string and set the Transformation to URL decode . Click Add filter and then click Create . 4. With the condition created, and any additional conditions created based on need as well, you are ready to create a rule. In the AWS WAF console, select Rules from the side-bar menu to the left of the console, under the AWS WAF heading. 5. Click on Create Rule : 6. Provide matchSQLi for the name, metric name and sect the region where you deployed the stack. Set the rule type to Regular rule . 7. Add a condition to the rule. For our rule example, choose \u201cWhen a request\u201d does (no negation) match at least one of the filters in the SQL injection match condition . Choose the SQL injection condition you have previously created. 8. Click Add Condition and click Create at the bottom of the screen. 9. Follow the steps in the Identify the WAF ACL for your site section above to go back to the Rules tab of your web ACL. 10. Click Edit web ACL . 11. In the Rules dropdown, select your rule, and click Add rule to web ACL . 12. Reorder the rules as appropriate for your use case. 13. Click Update to persist the changes. Additional Resources For a more comprehensive discussion of common vulnerabilities for web applications, as well as how to mitigate them using AWS WAF, and other AWS services, please refer to the Use AWS WAF to Mitigate OWASP\u2019s Top 10 Web Application Vulnerabilities whitepaper .","title":"Console Walkthrough - Creating a Condition and Rule"},{"location":"workshop/perimeter-layer/remediate/#waf-rule-creation-and-solutions","text":"In this phase, we will have a set of 6 exercises walking you through the process of building a basic mitigation rule set for common vulnerabilities. We will build these rules from scratch, so you can gain familiarity with the AWS WAF programming model and you can then write rules specific to your applications. Note About Exercise Solutions For the exercises below, you will find the high level description and solution configuration for your web ACL. You can test your ACL ruleset at any time using the Red Team Host. For AWS sponsored event, you can also view test results on the WAF Lab Dashboard .","title":"WAF Rule Creation and Solutions"},{"location":"workshop/perimeter-layer/remediate/#1-sql-injection-cross-site-scripting-mitigation","text":"Use the SQL injection, cross-site scripting, as well as string and regex matching conditions to build rules that mitigate injection attacks and cross site scripting attacks. Consider the following: - How does your web application accept end-user input (whether directly or indirectly). Which HTTP request components does that input get inserted into? - What kind of content encoding considerations do you need to factor in for the input format? - What considerations do you need to account for in regards to false positives? For example, does your application legitimately need to accept SQL statements as input? How do the requirements derived from the above questions affect your solution? Solution update the SQL injection condition named filterSQLi with 2 additional filters query_string, url decode You should have created this filter in the walk through above body, html decode header, cookie, url decode View the existing matchSQLi rule to confirm additional filters create Cross-site scripting condition named filterXSS with 4 filters query_string, url decode body, html decode body, url decode header, cookie, url decode create a String and regex matching String match condition named filterXSSPathException with 1 filter. This demonstrates how to add an exception for the XSS rule uri, starts with, no transform, /reportBuilder/Editor.aspx create a rule named matchXSS type regular does match XSS condition: filterXSS does not match string match condition: filterXSSPathException add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked","title":"1. SQL Injection &amp; Cross Site Scripting Mitigation"},{"location":"workshop/perimeter-layer/remediate/#2-enforce-request-hygiene","text":"Use the string and regex matching, size constraints and IP address match conditions to build rules that block non-conforming or low value HTTP requests. Consider the following: \u2022 Are there limits to the size of the various HTTP request components relevant to your web application? For example, does your application ever use URIs that are longer than 100 characters in size? \u2022 Are there specific HTTP request components without which your application cannot operate effectively (e.g. CSRF token header, authorization header, referrer header)? Build rules that ensure the requests your application ends up processing are valid, conforming and valuable. Solution create String and regex matching String match type condition named filterFormProcessor with 1 filter uri, starts with, no transform, /form.php create string match condition named filterPOSTMethod with 1 filter uri, exactly matches, no transform, /form.php create String and regex matching Regex match condition named filterCSRFToken with 1 filter header x-csrf-token ( type in manually ), url decode, create regex pattern set named csrf , matches pattern: ^[0-9a-f]{40}$ create rule named matchCSRF type regular does match string condition: filterFormProcessor does match string condition: filterPOSTMethod does not match regex match condition: filterCSRFToken add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked","title":"2. Enforce Request Hygiene"},{"location":"workshop/perimeter-layer/remediate/#3-mitigate-file-inclusion-path-traversal","text":"Use the string and regex matching conditions to build rules that block specific patterns indicative of unwanted path traversal or file inclusion. Consider the following: Can end users browse the directory structure of your web folders? Do you have directory indexes enabled? Is your application (or any dependency components) use input parameters in filesystem or remote URL references? Do you adequately lock down access so input paths cannot be manipulated? What considerations do you need to account for in regards to false positives (directory traversal signature patterns)? Build rules that ensure the relevant HTTP request components used for input into paths do not contain known path traversal patterns. Solution create a String and regex matching String match type condition named filterTraversal with 3 filters uri, starts with, url_decode, /include query_string, contains, url_decode, ../ query_string, contains, url_decode, :// create rule named matchTraversal type regular does match string condition: filterTraversal add rules to Web ACL Re-run the WAF test script (scanner.py) from your red team host to confirm requests are blocked Note About Remaining Exercises The remaining exercises below are optional. You should proceed to the Verify Phase and come back to the content below if time permits.","title":"3. Mitigate File Inclusion &amp; Path Traversal"},{"location":"workshop/perimeter-layer/remediate/#4-limit-attack-footprint-optional","text":"Use the string and regex matching conditions along with geo match and IP address match conditions to build rules that limit the attack footprint against the exposed components of your application. Consider the following: \u2022 Does your web application have server-side include components in the public web path? \u2022 Does your web application have components at exposed paths that are not used (or dependencies have such functions)? \u2022 Do you have administrative, management, status or health check paths and components that aren\u2019t meant for end user access? You should consider blocking access to such elements, or limiting access to known sources, either whitelisted IP addresses or geographic locations. Solution create Geo match condition named filterAffiliates with 1 filter add country US, and RO create String and regex matching String match type condition named filterAdminUI with 1 filter uri, starts with, no transform, /admin create rule named matchAdminNotAffiliate type regular does match string condition: filterAdminUI does not match geo condition: filterAffiliates add rule to Web ACL","title":"4. Limit Attack Footprint (Optional)"},{"location":"workshop/perimeter-layer/remediate/#5-detect-mitigate-anomalies-optional","text":"What constitutes an anomaly in regards to your web application? A few common anomaly patterns are: Unusually elevated volume of requests in general Unusually elevated volumes of requests to specific URI paths Unusually elevated levels of requests generating specific non-HTTP status 200 responses Unusually elevated volumes from certain sources (IPs, geographies) Usual request signatures (referrers, user agent strings, content types, etc) Do you have mechanisms in place to detect such patterns? If so, can you build rules to mitigate them? Solution create String and regex match condition named filterLoginProcessor with 1 filter uri, starts with, no transform, /login.php create rule named matchRateLogin type rate-based, 2000 does match string condition: filterLoginProcessor does match string condition: filterPOSTMethod add rules to Web ACL","title":"5. Detect &amp; Mitigate Anomalies (Optional)"},{"location":"workshop/perimeter-layer/remediate/#6-reputation-lists-nuisance-requests-optional","text":"Reputation lists (whitelists or blacklists) are a good way to filter and stop servicing low value requests. This can reduce operating costs, and reduce exposure to attack vectors. Reputation lists can be self-maintained: lists of identifiable actors that you have determined are undesired. They can be identified any number of ways: the source IP address the user agent string reuse of hijacked authorization or session tokens, attempting to make requests to paths that clearly do not exist in your application but are well known vulnerable software packages (probing) Build blacklists of such actors using the relevant conditions and set up rules to match and block them. An example IP-based blacklist already exists in your sandbox environment. Reputation lists can also be maintained by third parties. The AWS WAF Security Automations allow you to implement IP-based reputation lists. Solution edit the IP addresses condition named WafIpBlackList add a test IP address You can obtain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. create a String and regex matching String match condition named filterNoPath with 1 filter uri, starts with, no transform, /phpmyadmin Use the concepts you learned in the previous exercises to add the filterNoPath condition to your Web ACL. You can now proceed to the Verify Phase .","title":"6. Reputation Lists, Nuisance Requests (Optional)"},{"location":"workshop/perimeter-layer/verify/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Verify Phase In the previous remediation phase, you implemented an AWS WAF ruleset to protect your site from common attack vectors. You are now going to reassess the posture of the site to confirm the rules are performing as intended and blocking the simulated malicious requests. Confirm malicious requests are blocked by WAF policy Implement WAF monitoring dashboard using Amazon CloudWatch (Optional) Confirm malicious requests are blocked by WAF policy If needed, start a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint Confirm that all of the tests in the script pass. If requests (other than canary) are not being blocked, go back to the remediate phase and confirm your conditions and rules are properly configured. If the the automated scanner is being used for your event (AWS sponsored), you should also see green for your unique Id on the WAF scanning results dashboard . Implement WAF monitoring dashboard using Amazon CloudWatch (Optional) Use CloudWatch Dashboards to create a monitoring system for your protection layer. The following AWS article details this process: https://aws.amazon.com/blogs/aws/cloudwatch-dashboards-create-use-customized-metrics-views/ Here are some sample of metrics that you can use. Starting from top left side, in clockwise order, we have: Allowed vs Blocked Requests : if you receive a surge in allowed access (2 times normal peak access) or blocked access (any period that identifies more than 1,000 blocked requests), you can configure CloudWatch to send an alert. The idea here is to track known DDoS (when blocked requests increase) or new version of attack (when the requests are allowed to access the system); BytesDownloaded vs. Uploaded : help you identify when DDoS attack targets a service that doesn't need to receive a huge amount of access in order to exhaust resources (ex: search engine component sending MBs of information for one specific request parameters set); ELB Spillover and Queue length : use these metrics to verify if the attack is already causing damage to the infrastructure and/or for some reason, the attacker is bypassing protection layer and attacking directly unprotected resources; ELB Request Count : same as above, helps you identify damage by checking if the attacker is bypassing protection layer and/or CloudFront cache; review rules to increase cache hit rate; ELB Healthy Host : another system health check metric; ASG CPU Utilization : identify if the attacker is not only bypassing the CloudFront/WAF but also the ELB layer, also use to identify the damage impact of an attack; This concludes the Perimeter Round. You can now proceed to the Host Layer round","title":"Verify Phase"},{"location":"workshop/perimeter-layer/verify/#mitigating-common-web-application-attack-vectors-using-aws-waf-verify-phase","text":"In the previous remediation phase, you implemented an AWS WAF ruleset to protect your site from common attack vectors. You are now going to reassess the posture of the site to confirm the rules are performing as intended and blocking the simulated malicious requests. Confirm malicious requests are blocked by WAF policy Implement WAF monitoring dashboard using Amazon CloudWatch (Optional)","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Verify Phase"},{"location":"workshop/perimeter-layer/verify/#confirm-malicious-requests-are-blocked-by-waf-policy","text":"If needed, start a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint Confirm that all of the tests in the script pass. If requests (other than canary) are not being blocked, go back to the remediate phase and confirm your conditions and rules are properly configured. If the the automated scanner is being used for your event (AWS sponsored), you should also see green for your unique Id on the WAF scanning results dashboard .","title":"Confirm malicious requests are blocked by WAF policy"},{"location":"workshop/perimeter-layer/verify/#implement-waf-monitoring-dashboard-using-amazon-cloudwatch-optional","text":"Use CloudWatch Dashboards to create a monitoring system for your protection layer. The following AWS article details this process: https://aws.amazon.com/blogs/aws/cloudwatch-dashboards-create-use-customized-metrics-views/ Here are some sample of metrics that you can use. Starting from top left side, in clockwise order, we have: Allowed vs Blocked Requests : if you receive a surge in allowed access (2 times normal peak access) or blocked access (any period that identifies more than 1,000 blocked requests), you can configure CloudWatch to send an alert. The idea here is to track known DDoS (when blocked requests increase) or new version of attack (when the requests are allowed to access the system); BytesDownloaded vs. Uploaded : help you identify when DDoS attack targets a service that doesn't need to receive a huge amount of access in order to exhaust resources (ex: search engine component sending MBs of information for one specific request parameters set); ELB Spillover and Queue length : use these metrics to verify if the attack is already causing damage to the infrastructure and/or for some reason, the attacker is bypassing protection layer and attacking directly unprotected resources; ELB Request Count : same as above, helps you identify damage by checking if the attacker is bypassing protection layer and/or CloudFront cache; review rules to increase cache hit rate; ELB Healthy Host : another system health check metric; ASG CPU Utilization : identify if the attacker is not only bypassing the CloudFront/WAF but also the ELB layer, also use to identify the damage impact of an attack; This concludes the Perimeter Round. You can now proceed to the Host Layer round","title":"Implement WAF monitoring dashboard using Amazon CloudWatch (Optional)"}]}